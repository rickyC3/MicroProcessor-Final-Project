                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _Get_Dot_PARM_3
                                     12 	.globl _Get_Dot_PARM_2
                                     13 	.globl _draw_PARM_5
                                     14 	.globl _draw_PARM_4
                                     15 	.globl _draw_PARM_3
                                     16 	.globl _draw_PARM_2
                                     17 	.globl _del_PARM_5
                                     18 	.globl _del_PARM_4
                                     19 	.globl _del_PARM_3
                                     20 	.globl _del_PARM_2
                                     21 	.globl _overlap_PARM_8
                                     22 	.globl _overlap_PARM_7
                                     23 	.globl _overlap_PARM_6
                                     24 	.globl _overlap_PARM_5
                                     25 	.globl _overlap_PARM_4
                                     26 	.globl _overlap_PARM_3
                                     27 	.globl _overlap_PARM_2
                                     28 	.globl _main
                                     29 	.globl _OLED_SetCursor
                                     30 	.globl _OLED_Clear
                                     31 	.globl _OLED_DisplayString
                                     32 	.globl _OLED_DisplayChar
                                     33 	.globl _OLED_Init
                                     34 	.globl _Initial7219
                                     35 	.globl _Writesingle7219
                                     36 	.globl _Delay_Re
                                     37 	.globl _Delay_Do
                                     38 	.globl _Get_Key
                                     39 	.globl _delay_ms
                                     40 	.globl _CY
                                     41 	.globl _AC
                                     42 	.globl _F0
                                     43 	.globl _RS1
                                     44 	.globl _RS0
                                     45 	.globl _OV
                                     46 	.globl _F1
                                     47 	.globl _P
                                     48 	.globl _PS
                                     49 	.globl _PT1
                                     50 	.globl _PX1
                                     51 	.globl _PT0
                                     52 	.globl _PX0
                                     53 	.globl _RD
                                     54 	.globl _WR
                                     55 	.globl _T1
                                     56 	.globl _T0
                                     57 	.globl _INT1
                                     58 	.globl _INT0
                                     59 	.globl _TXD
                                     60 	.globl _RXD
                                     61 	.globl _P3_7
                                     62 	.globl _P3_6
                                     63 	.globl _P3_5
                                     64 	.globl _P3_4
                                     65 	.globl _P3_3
                                     66 	.globl _P3_2
                                     67 	.globl _P3_1
                                     68 	.globl _P3_0
                                     69 	.globl _EA
                                     70 	.globl _ES
                                     71 	.globl _ET1
                                     72 	.globl _EX1
                                     73 	.globl _ET0
                                     74 	.globl _EX0
                                     75 	.globl _P2_7
                                     76 	.globl _P2_6
                                     77 	.globl _P2_5
                                     78 	.globl _P2_4
                                     79 	.globl _P2_3
                                     80 	.globl _P2_2
                                     81 	.globl _P2_1
                                     82 	.globl _P2_0
                                     83 	.globl _SM0
                                     84 	.globl _SM1
                                     85 	.globl _SM2
                                     86 	.globl _REN
                                     87 	.globl _TB8
                                     88 	.globl _RB8
                                     89 	.globl _TI
                                     90 	.globl _RI
                                     91 	.globl _P1_7
                                     92 	.globl _P1_6
                                     93 	.globl _P1_5
                                     94 	.globl _P1_4
                                     95 	.globl _P1_3
                                     96 	.globl _P1_2
                                     97 	.globl _P1_1
                                     98 	.globl _P1_0
                                     99 	.globl _TF1
                                    100 	.globl _TR1
                                    101 	.globl _TF0
                                    102 	.globl _TR0
                                    103 	.globl _IE1
                                    104 	.globl _IT1
                                    105 	.globl _IE0
                                    106 	.globl _IT0
                                    107 	.globl _P0_7
                                    108 	.globl _P0_6
                                    109 	.globl _P0_5
                                    110 	.globl _P0_4
                                    111 	.globl _P0_3
                                    112 	.globl _P0_2
                                    113 	.globl _P0_1
                                    114 	.globl _P0_0
                                    115 	.globl _B
                                    116 	.globl _ACC
                                    117 	.globl _PSW
                                    118 	.globl _IP
                                    119 	.globl _P3
                                    120 	.globl _IE
                                    121 	.globl _P2
                                    122 	.globl _SBUF
                                    123 	.globl _SCON
                                    124 	.globl _P1
                                    125 	.globl _TH1
                                    126 	.globl _TH0
                                    127 	.globl _TL1
                                    128 	.globl _TL0
                                    129 	.globl _TMOD
                                    130 	.globl _TCON
                                    131 	.globl _PCON
                                    132 	.globl _DPH
                                    133 	.globl _DPL
                                    134 	.globl _SP
                                    135 	.globl _P0
                                    136 	.globl _mat2_2
                                    137 	.globl _mat2_1
                                    138 	.globl _mat1_2
                                    139 	.globl _mat1_1
                                    140 	.globl _player_score
                                    141 	.globl _player
                                    142 	.globl _player2
                                    143 	.globl _player1
                                    144 	.globl _turn
                                    145 	.globl _get_bit
                                    146 	.globl _conti_flag
                                    147 	.globl _now_col
                                    148 	.globl _now_row
                                    149 	.globl _nxt_col
                                    150 	.globl _nxt_row
                                    151 	.globl _check_
                                    152 	.globl _idx
                                    153 	.globl _tmp_l
                                    154 	.globl _tmp_j
                                    155 	.globl _tmp_i
                                    156 	.globl _l
                                    157 	.globl _j
                                    158 	.globl _i
                                    159 	.globl _boat_type
                                    160 	.globl _now_key
                                    161 	.globl _mask
                                    162 	.globl _player_bool
                                    163 	.globl _winner
                                    164 	.globl _mode
                                    165 	.globl _in_i
                                    166 	.globl _mode0
                                    167 	.globl _mode1
                                    168 	.globl _mode2
                                    169 	.globl _mode3
                                    170 	.globl _overlap
                                    171 	.globl _del
                                    172 	.globl _draw
                                    173 	.globl _Get_Dot
                                    174 	.globl _mode4
                                    175 	.globl _mode5
                                    176 ;--------------------------------------------------------
                                    177 ; special function registers
                                    178 ;--------------------------------------------------------
                                    179 	.area RSEG    (ABS,DATA)
      000000                        180 	.org 0x0000
                           000080   181 _P0	=	0x0080
                           000081   182 _SP	=	0x0081
                           000082   183 _DPL	=	0x0082
                           000083   184 _DPH	=	0x0083
                           000087   185 _PCON	=	0x0087
                           000088   186 _TCON	=	0x0088
                           000089   187 _TMOD	=	0x0089
                           00008A   188 _TL0	=	0x008a
                           00008B   189 _TL1	=	0x008b
                           00008C   190 _TH0	=	0x008c
                           00008D   191 _TH1	=	0x008d
                           000090   192 _P1	=	0x0090
                           000098   193 _SCON	=	0x0098
                           000099   194 _SBUF	=	0x0099
                           0000A0   195 _P2	=	0x00a0
                           0000A8   196 _IE	=	0x00a8
                           0000B0   197 _P3	=	0x00b0
                           0000B8   198 _IP	=	0x00b8
                           0000D0   199 _PSW	=	0x00d0
                           0000E0   200 _ACC	=	0x00e0
                           0000F0   201 _B	=	0x00f0
                                    202 ;--------------------------------------------------------
                                    203 ; special function bits
                                    204 ;--------------------------------------------------------
                                    205 	.area RSEG    (ABS,DATA)
      000000                        206 	.org 0x0000
                           000080   207 _P0_0	=	0x0080
                           000081   208 _P0_1	=	0x0081
                           000082   209 _P0_2	=	0x0082
                           000083   210 _P0_3	=	0x0083
                           000084   211 _P0_4	=	0x0084
                           000085   212 _P0_5	=	0x0085
                           000086   213 _P0_6	=	0x0086
                           000087   214 _P0_7	=	0x0087
                           000088   215 _IT0	=	0x0088
                           000089   216 _IE0	=	0x0089
                           00008A   217 _IT1	=	0x008a
                           00008B   218 _IE1	=	0x008b
                           00008C   219 _TR0	=	0x008c
                           00008D   220 _TF0	=	0x008d
                           00008E   221 _TR1	=	0x008e
                           00008F   222 _TF1	=	0x008f
                           000090   223 _P1_0	=	0x0090
                           000091   224 _P1_1	=	0x0091
                           000092   225 _P1_2	=	0x0092
                           000093   226 _P1_3	=	0x0093
                           000094   227 _P1_4	=	0x0094
                           000095   228 _P1_5	=	0x0095
                           000096   229 _P1_6	=	0x0096
                           000097   230 _P1_7	=	0x0097
                           000098   231 _RI	=	0x0098
                           000099   232 _TI	=	0x0099
                           00009A   233 _RB8	=	0x009a
                           00009B   234 _TB8	=	0x009b
                           00009C   235 _REN	=	0x009c
                           00009D   236 _SM2	=	0x009d
                           00009E   237 _SM1	=	0x009e
                           00009F   238 _SM0	=	0x009f
                           0000A0   239 _P2_0	=	0x00a0
                           0000A1   240 _P2_1	=	0x00a1
                           0000A2   241 _P2_2	=	0x00a2
                           0000A3   242 _P2_3	=	0x00a3
                           0000A4   243 _P2_4	=	0x00a4
                           0000A5   244 _P2_5	=	0x00a5
                           0000A6   245 _P2_6	=	0x00a6
                           0000A7   246 _P2_7	=	0x00a7
                           0000A8   247 _EX0	=	0x00a8
                           0000A9   248 _ET0	=	0x00a9
                           0000AA   249 _EX1	=	0x00aa
                           0000AB   250 _ET1	=	0x00ab
                           0000AC   251 _ES	=	0x00ac
                           0000AF   252 _EA	=	0x00af
                           0000B0   253 _P3_0	=	0x00b0
                           0000B1   254 _P3_1	=	0x00b1
                           0000B2   255 _P3_2	=	0x00b2
                           0000B3   256 _P3_3	=	0x00b3
                           0000B4   257 _P3_4	=	0x00b4
                           0000B5   258 _P3_5	=	0x00b5
                           0000B6   259 _P3_6	=	0x00b6
                           0000B7   260 _P3_7	=	0x00b7
                           0000B0   261 _RXD	=	0x00b0
                           0000B1   262 _TXD	=	0x00b1
                           0000B2   263 _INT0	=	0x00b2
                           0000B3   264 _INT1	=	0x00b3
                           0000B4   265 _T0	=	0x00b4
                           0000B5   266 _T1	=	0x00b5
                           0000B6   267 _WR	=	0x00b6
                           0000B7   268 _RD	=	0x00b7
                           0000B8   269 _PX0	=	0x00b8
                           0000B9   270 _PT0	=	0x00b9
                           0000BA   271 _PX1	=	0x00ba
                           0000BB   272 _PT1	=	0x00bb
                           0000BC   273 _PS	=	0x00bc
                           0000D0   274 _P	=	0x00d0
                           0000D1   275 _F1	=	0x00d1
                           0000D2   276 _OV	=	0x00d2
                           0000D3   277 _RS0	=	0x00d3
                           0000D4   278 _RS1	=	0x00d4
                           0000D5   279 _F0	=	0x00d5
                           0000D6   280 _AC	=	0x00d6
                           0000D7   281 _CY	=	0x00d7
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable register banks
                                    284 ;--------------------------------------------------------
                                    285 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        286 	.ds 8
                                    287 ;--------------------------------------------------------
                                    288 ; internal ram data
                                    289 ;--------------------------------------------------------
                                    290 	.area DSEG    (DATA)
      000000                        291 _in_i::
      000000                        292 	.ds 2
      000002                        293 _mode::
      000002                        294 	.ds 1
      000003                        295 _winner::
      000003                        296 	.ds 1
      000004                        297 _player_bool::
      000004                        298 	.ds 3
      000007                        299 _mask::
      000007                        300 	.ds 1
      000008                        301 _now_key::
      000008                        302 	.ds 1
      000009                        303 _boat_type::
      000009                        304 	.ds 4
      00000D                        305 _i::
      00000D                        306 	.ds 1
      00000E                        307 _j::
      00000E                        308 	.ds 1
      00000F                        309 _l::
      00000F                        310 	.ds 1
      000010                        311 _tmp_i::
      000010                        312 	.ds 1
      000011                        313 _tmp_j::
      000011                        314 	.ds 1
      000012                        315 _tmp_l::
      000012                        316 	.ds 1
      000013                        317 _idx::
      000013                        318 	.ds 1
      000014                        319 _check_::
      000014                        320 	.ds 1
      000015                        321 _nxt_row::
      000015                        322 	.ds 1
      000016                        323 _nxt_col::
      000016                        324 	.ds 1
      000017                        325 _now_row::
      000017                        326 	.ds 1
      000018                        327 _now_col::
      000018                        328 	.ds 1
      000019                        329 _conti_flag::
      000019                        330 	.ds 1
      00001A                        331 _get_bit::
      00001A                        332 	.ds 1
      00001B                        333 _turn::
      00001B                        334 	.ds 1
      00001C                        335 _player1::
      00001C                        336 	.ds 4
      000020                        337 _player2::
      000020                        338 	.ds 4
      000024                        339 _player::
      000024                        340 	.ds 6
      00002A                        341 _player_score::
      00002A                        342 	.ds 3
      00002D                        343 _mat1_1::
      00002D                        344 	.ds 9
      000036                        345 _mat1_2::
      000036                        346 	.ds 9
      00003F                        347 _mat2_1::
      00003F                        348 	.ds 9
      000048                        349 _mat2_2::
      000048                        350 	.ds 9
                                    351 ;--------------------------------------------------------
                                    352 ; overlayable items in internal ram 
                                    353 ;--------------------------------------------------------
                                    354 	.area	OSEG    (OVR,DATA)
      000000                        355 _overlap_PARM_2:
      000000                        356 	.ds 1
      000001                        357 _overlap_PARM_3:
      000001                        358 	.ds 1
      000002                        359 _overlap_PARM_4:
      000002                        360 	.ds 1
      000003                        361 _overlap_PARM_5:
      000003                        362 	.ds 1
      000004                        363 _overlap_PARM_6:
      000004                        364 	.ds 1
      000005                        365 _overlap_PARM_7:
      000005                        366 	.ds 1
      000006                        367 _overlap_PARM_8:
      000006                        368 	.ds 1
                                    369 	.area	OSEG    (OVR,DATA)
      000000                        370 _del_PARM_2:
      000000                        371 	.ds 1
      000001                        372 _del_PARM_3:
      000001                        373 	.ds 1
      000002                        374 _del_PARM_4:
      000002                        375 	.ds 1
      000003                        376 _del_PARM_5:
      000003                        377 	.ds 1
                                    378 	.area	OSEG    (OVR,DATA)
      000000                        379 _draw_PARM_2:
      000000                        380 	.ds 1
      000001                        381 _draw_PARM_3:
      000001                        382 	.ds 1
      000002                        383 _draw_PARM_4:
      000002                        384 	.ds 1
      000003                        385 _draw_PARM_5:
      000003                        386 	.ds 1
                                    387 	.area	OSEG    (OVR,DATA)
      000000                        388 _Get_Dot_PARM_2:
      000000                        389 	.ds 1
      000001                        390 _Get_Dot_PARM_3:
      000001                        391 	.ds 1
                                    392 ;--------------------------------------------------------
                                    393 ; Stack segment in internal ram 
                                    394 ;--------------------------------------------------------
                                    395 	.area	SSEG
      000000                        396 __start__stack:
      000000                        397 	.ds	1
                                    398 
                                    399 ;--------------------------------------------------------
                                    400 ; indirectly addressable internal ram data
                                    401 ;--------------------------------------------------------
                                    402 	.area ISEG    (DATA)
                                    403 ;--------------------------------------------------------
                                    404 ; absolute internal ram data
                                    405 ;--------------------------------------------------------
                                    406 	.area IABS    (ABS,DATA)
                                    407 	.area IABS    (ABS,DATA)
                                    408 ;--------------------------------------------------------
                                    409 ; bit data
                                    410 ;--------------------------------------------------------
                                    411 	.area BSEG    (BIT)
      000000                        412 _mode1_sloc0_1_0:
      000000                        413 	.ds 1
      000001                        414 _mode2_sloc0_1_0:
      000001                        415 	.ds 1
      000002                        416 _mode3_sloc0_1_0:
      000002                        417 	.ds 1
      000003                        418 _mode4_sloc0_1_0:
      000003                        419 	.ds 1
                                    420 ;--------------------------------------------------------
                                    421 ; paged external ram data
                                    422 ;--------------------------------------------------------
                                    423 	.area PSEG    (PAG,XDATA)
                                    424 ;--------------------------------------------------------
                                    425 ; external ram data
                                    426 ;--------------------------------------------------------
                                    427 	.area XSEG    (XDATA)
                                    428 ;--------------------------------------------------------
                                    429 ; absolute external ram data
                                    430 ;--------------------------------------------------------
                                    431 	.area XABS    (ABS,XDATA)
                                    432 ;--------------------------------------------------------
                                    433 ; external initialized ram data
                                    434 ;--------------------------------------------------------
                                    435 	.area XISEG   (XDATA)
                                    436 	.area HOME    (CODE)
                                    437 	.area GSINIT0 (CODE)
                                    438 	.area GSINIT1 (CODE)
                                    439 	.area GSINIT2 (CODE)
                                    440 	.area GSINIT3 (CODE)
                                    441 	.area GSINIT4 (CODE)
                                    442 	.area GSINIT5 (CODE)
                                    443 	.area GSINIT  (CODE)
                                    444 	.area GSFINAL (CODE)
                                    445 	.area CSEG    (CODE)
                                    446 ;--------------------------------------------------------
                                    447 ; interrupt vector 
                                    448 ;--------------------------------------------------------
                                    449 	.area HOME    (CODE)
      000000                        450 __interrupt_vect:
      000000 02r00r00         [24]  451 	ljmp	__sdcc_gsinit_startup
                                    452 ;--------------------------------------------------------
                                    453 ; global & static initialisations
                                    454 ;--------------------------------------------------------
                                    455 	.area HOME    (CODE)
                                    456 	.area GSINIT  (CODE)
                                    457 	.area GSFINAL (CODE)
                                    458 	.area GSINIT  (CODE)
                                    459 	.globl __sdcc_gsinit_startup
                                    460 	.globl __sdcc_program_startup
                                    461 	.globl __start__stack
                                    462 	.globl __mcs51_genXINIT
                                    463 	.globl __mcs51_genXRAMCLEAR
                                    464 	.globl __mcs51_genRAMCLEAR
                                    465 ;	./src/main.c:15: unsigned char mode = 0; // 當前在哪個狀態
      000000 75*02 00         [24]  466 	mov	_mode,#0x00
                                    467 ;	./src/main.c:16: char winner = 0;        // 紀錄最後的贏家
      000003 75*03 00         [24]  468 	mov	_winner,#0x00
                                    469 ;	./src/main.c:17: unsigned char player_bool[3] = {0 ,0, 0}; // 開局前的確認
      000006 75*04 00         [24]  470 	mov	_player_bool,#0x00
      000009 75*05 00         [24]  471 	mov	(_player_bool + 0x0001),#0x00
      00000C 75*06 00         [24]  472 	mov	(_player_bool + 0x0002),#0x00
                                    473 ;	./src/main.c:20: char boat_type[][2] = {{4, 2}, {3, 3}}; // 兩種軍艦 4*2, 3*3
      00000F 75*09 04         [24]  474 	mov	_boat_type,#0x04
      000012 75*0A 02         [24]  475 	mov	(_boat_type + 0x0001),#0x02
      000015 75*0B 03         [24]  476 	mov	(_boat_type + 0x0002),#0x03
      000018 75*0C 03         [24]  477 	mov	(_boat_type + 0x0003),#0x03
                                    478 ;	./src/main.c:26: char conti_flag = 0;    // 雙層迴圈中的中斷flag
      00001B 75*19 00         [24]  479 	mov	_conti_flag,#0x00
                                    480 ;	./src/main.c:29: char player1[][2] = {{1, 0}, {16, 16}};  // 玩家所放置的軍艦的位置 (col, row) // col 1~8, row 0~7 
      00001E 75*1C 01         [24]  481 	mov	_player1,#0x01
      000021 75*1D 00         [24]  482 	mov	(_player1 + 0x0001),#0x00
      000024 75*1E 10         [24]  483 	mov	(_player1 + 0x0002),#0x10
      000027 75*1F 10         [24]  484 	mov	(_player1 + 0x0003),#0x10
                                    485 ;	./src/main.c:30: char player2[][2] = {{1, 0}, {16, 16}};
      00002A 75*20 01         [24]  486 	mov	_player2,#0x01
      00002D 75*21 00         [24]  487 	mov	(_player2 + 0x0001),#0x00
      000030 75*22 10         [24]  488 	mov	(_player2 + 0x0002),#0x10
      000033 75*23 10         [24]  489 	mov	(_player2 + 0x0003),#0x10
                                    490 ;	./src/main.c:31: char player[][2] = {{0, 0},{1, 0}, {1, 0}}; // 玩家鼠標所在的位置
      000036 75*24 00         [24]  491 	mov	_player,#0x00
      000039 75*25 00         [24]  492 	mov	(_player + 0x0001),#0x00
      00003C 75*26 01         [24]  493 	mov	(_player + 0x0002),#0x01
      00003F 75*27 00         [24]  494 	mov	(_player + 0x0003),#0x00
      000042 75*28 01         [24]  495 	mov	(_player + 0x0004),#0x01
      000045 75*29 00         [24]  496 	mov	(_player + 0x0005),#0x00
                                    497 ;	./src/main.c:32: char player_score[] = {0, 0, 0};            // 各玩家的得分(win: 17分)
      000048 75*2A 00         [24]  498 	mov	_player_score,#0x00
      00004B 75*2B 00         [24]  499 	mov	(_player_score + 0x0001),#0x00
      00004E 75*2C 00         [24]  500 	mov	(_player_score + 0x0002),#0x00
                                    501 ;	./src/main.c:33: char mat1_1[] = {0xff, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00};
      000051 75*2D FF         [24]  502 	mov	_mat1_1,#0xff
      000054 75*2E 00         [24]  503 	mov	(_mat1_1 + 0x0001),#0x00
      000057 75*2F 00         [24]  504 	mov	(_mat1_1 + 0x0002),#0x00
      00005A 75*30 00         [24]  505 	mov	(_mat1_1 + 0x0003),#0x00
      00005D 75*31 00         [24]  506 	mov	(_mat1_1 + 0x0004),#0x00
      000060 75*32 00         [24]  507 	mov	(_mat1_1 + 0x0005),#0x00
      000063 75*33 00         [24]  508 	mov	(_mat1_1 + 0x0006),#0x00
      000066 75*34 00         [24]  509 	mov	(_mat1_1 + 0x0007),#0x00
      000069 75*35 00         [24]  510 	mov	(_mat1_1 + 0x0008),#0x00
                                    511 ;	./src/main.c:34: char mat1_2[] = {0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00};
      00006C 75*36 00         [24]  512 	mov	_mat1_2,#0x00
      00006F 75*37 00         [24]  513 	mov	(_mat1_2 + 0x0001),#0x00
      000072 75*38 00         [24]  514 	mov	(_mat1_2 + 0x0002),#0x00
      000075 75*39 00         [24]  515 	mov	(_mat1_2 + 0x0003),#0x00
      000078 75*3A 00         [24]  516 	mov	(_mat1_2 + 0x0004),#0x00
      00007B 75*3B 00         [24]  517 	mov	(_mat1_2 + 0x0005),#0x00
      00007E 75*3C 00         [24]  518 	mov	(_mat1_2 + 0x0006),#0x00
      000081 75*3D 00         [24]  519 	mov	(_mat1_2 + 0x0007),#0x00
      000084 75*3E 00         [24]  520 	mov	(_mat1_2 + 0x0008),#0x00
                                    521 ;	./src/main.c:35: char mat2_1[] = {0xff, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00};
      000087 75*3F FF         [24]  522 	mov	_mat2_1,#0xff
      00008A 75*40 00         [24]  523 	mov	(_mat2_1 + 0x0001),#0x00
      00008D 75*41 00         [24]  524 	mov	(_mat2_1 + 0x0002),#0x00
      000090 75*42 00         [24]  525 	mov	(_mat2_1 + 0x0003),#0x00
      000093 75*43 00         [24]  526 	mov	(_mat2_1 + 0x0004),#0x00
      000096 75*44 00         [24]  527 	mov	(_mat2_1 + 0x0005),#0x00
      000099 75*45 00         [24]  528 	mov	(_mat2_1 + 0x0006),#0x00
      00009C 75*46 00         [24]  529 	mov	(_mat2_1 + 0x0007),#0x00
      00009F 75*47 00         [24]  530 	mov	(_mat2_1 + 0x0008),#0x00
                                    531 ;	./src/main.c:36: char mat2_2[] = {0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00};
      0000A2 75*48 00         [24]  532 	mov	_mat2_2,#0x00
      0000A5 75*49 00         [24]  533 	mov	(_mat2_2 + 0x0001),#0x00
      0000A8 75*4A 00         [24]  534 	mov	(_mat2_2 + 0x0002),#0x00
      0000AB 75*4B 00         [24]  535 	mov	(_mat2_2 + 0x0003),#0x00
      0000AE 75*4C 00         [24]  536 	mov	(_mat2_2 + 0x0004),#0x00
      0000B1 75*4D 00         [24]  537 	mov	(_mat2_2 + 0x0005),#0x00
      0000B4 75*4E 00         [24]  538 	mov	(_mat2_2 + 0x0006),#0x00
      0000B7 75*4F 00         [24]  539 	mov	(_mat2_2 + 0x0007),#0x00
      0000BA 75*50 00         [24]  540 	mov	(_mat2_2 + 0x0008),#0x00
                                    541 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  542 	ljmp	__sdcc_program_startup
                                    543 ;--------------------------------------------------------
                                    544 ; Home
                                    545 ;--------------------------------------------------------
                                    546 	.area HOME    (CODE)
                                    547 	.area HOME    (CODE)
      000003                        548 __sdcc_program_startup:
      000003 02r00r00         [24]  549 	ljmp	_main
                                    550 ;	return from main will return to caller
                                    551 ;--------------------------------------------------------
                                    552 ; code
                                    553 ;--------------------------------------------------------
                                    554 	.area CSEG    (CODE)
                                    555 ;------------------------------------------------------------
                                    556 ;Allocation info for local variables in function 'main'
                                    557 ;------------------------------------------------------------
                                    558 ;now_key                   Allocated to registers 
                                    559 ;now2_key                  Allocated to registers 
                                    560 ;------------------------------------------------------------
                                    561 ;	./src/main.c:49: void main(void)
                                    562 ;	-----------------------------------------
                                    563 ;	 function main
                                    564 ;	-----------------------------------------
      000000                        565 _main:
                           000007   566 	ar7 = 0x07
                           000006   567 	ar6 = 0x06
                           000005   568 	ar5 = 0x05
                           000004   569 	ar4 = 0x04
                           000003   570 	ar3 = 0x03
                           000002   571 	ar2 = 0x02
                           000001   572 	ar1 = 0x01
                           000000   573 	ar0 = 0x00
                                    574 ;	./src/main.c:53: OLED_Init();
      000000 12r00r00         [24]  575 	lcall	_OLED_Init
                                    576 ;	./src/main.c:54: Initial7219();
      000003 12r00r00         [24]  577 	lcall	_Initial7219
                                    578 ;	./src/main.c:55: while (1){
      000006                        579 00119$:
                                    580 ;	./src/main.c:56: led = ~(1<<mode);
      000006 AF*02            [24]  581 	mov	r7,_mode
      000008 8F F0            [24]  582 	mov	b,r7
      00000A 05 F0            [12]  583 	inc	b
      00000C 74 01            [12]  584 	mov	a,#0x01
      00000E 80 02            [24]  585 	sjmp	00153$
      000010                        586 00151$:
      000010 25 E0            [12]  587 	add	a,acc
      000012                        588 00153$:
      000012 D5 F0 FB         [24]  589 	djnz	b,00151$
      000015 FF               [12]  590 	mov	r7,a
      000016 F4               [12]  591 	cpl	a
      000017 F5 90            [12]  592 	mov	_P1,a
                                    593 ;	./src/main.c:57: if (mode == 0){
      000019 E5*02            [12]  594 	mov	a,_mode
      00001B 70 05            [24]  595 	jnz	00116$
                                    596 ;	./src/main.c:58: mode0();
      00001D 12r00r54         [24]  597 	lcall	_mode0
      000020 80 E4            [24]  598 	sjmp	00119$
      000022                        599 00116$:
                                    600 ;	./src/main.c:59: }else if (mode == 1){
      000022 74 01            [12]  601 	mov	a,#0x01
      000024 B5*02 05         [24]  602 	cjne	a,_mode,00113$
                                    603 ;	./src/main.c:60: mode1();
      000027 12r00rEA         [24]  604 	lcall	_mode1
      00002A 80 DA            [24]  605 	sjmp	00119$
      00002C                        606 00113$:
                                    607 ;	./src/main.c:61: }else if (mode == 2){
      00002C 74 02            [12]  608 	mov	a,#0x02
      00002E B5*02 05         [24]  609 	cjne	a,_mode,00110$
                                    610 ;	./src/main.c:62: mode2();
      000031 12r04r90         [24]  611 	lcall	_mode2
      000034 80 D0            [24]  612 	sjmp	00119$
      000036                        613 00110$:
                                    614 ;	./src/main.c:63: }else if (mode == 3){
      000036 74 03            [12]  615 	mov	a,#0x03
      000038 B5*02 05         [24]  616 	cjne	a,_mode,00107$
                                    617 ;	./src/main.c:64: mode3();
      00003B 12r08r36         [24]  618 	lcall	_mode3
      00003E 80 C6            [24]  619 	sjmp	00119$
      000040                        620 00107$:
                                    621 ;	./src/main.c:65: }else if (mode == 4){
      000040 74 04            [12]  622 	mov	a,#0x04
      000042 B5*02 05         [24]  623 	cjne	a,_mode,00104$
                                    624 ;	./src/main.c:66: mode4();
      000045 12r0Er24         [24]  625 	lcall	_mode4
      000048 80 BC            [24]  626 	sjmp	00119$
      00004A                        627 00104$:
                                    628 ;	./src/main.c:67: }else if (mode == 5){
      00004A 74 05            [12]  629 	mov	a,#0x05
      00004C B5*02 B7         [24]  630 	cjne	a,_mode,00119$
                                    631 ;	./src/main.c:68: mode5();
      00004F 12r11r66         [24]  632 	lcall	_mode5
                                    633 ;	./src/main.c:73: }
      000052 80 B2            [24]  634 	sjmp	00119$
                                    635 ;------------------------------------------------------------
                                    636 ;Allocation info for local variables in function 'mode0'
                                    637 ;------------------------------------------------------------
                                    638 ;	./src/main.c:75: void mode0(void){
                                    639 ;	-----------------------------------------
                                    640 ;	 function mode0
                                    641 ;	-----------------------------------------
      000054                        642 _mode0:
                                    643 ;	./src/main.c:76: if (but1 == 0){
      000054 20 B2 0C         [24]  644 	jb	_INT0,00104$
                                    645 ;	./src/main.c:77: delay_ms(10);
      000057 90 00 0A         [24]  646 	mov	dptr,#0x000a
      00005A 12r00r00         [24]  647 	lcall	_delay_ms
                                    648 ;	./src/main.c:78: if (but1 == 0){
      00005D 20 B2 03         [24]  649 	jb	_INT0,00104$
                                    650 ;	./src/main.c:79: player_bool[1] = 1;
      000060 75*05 01         [24]  651 	mov	(_player_bool + 0x0001),#0x01
      000063                        652 00104$:
                                    653 ;	./src/main.c:82: if (but4 == 0){
      000063 20 A1 0C         [24]  654 	jb	_P2_1,00108$
                                    655 ;	./src/main.c:83: delay_ms(10);
      000066 90 00 0A         [24]  656 	mov	dptr,#0x000a
      000069 12r00r00         [24]  657 	lcall	_delay_ms
                                    658 ;	./src/main.c:84: if (but4 == 0){
      00006C 20 A1 03         [24]  659 	jb	_P2_1,00108$
                                    660 ;	./src/main.c:85: player_bool[2] = 1;
      00006F 75*06 01         [24]  661 	mov	(_player_bool + 0x0002),#0x01
      000072                        662 00108$:
                                    663 ;	./src/main.c:88: OLED_SetCursor(2, 3);
      000072 75*00 03         [24]  664 	mov	_OLED_SetCursor_PARM_2,#0x03
      000075 75 82 02         [24]  665 	mov	dpl,#0x02
      000078 12r00r00         [24]  666 	lcall	_OLED_SetCursor
                                    667 ;	./src/main.c:89: OLED_DisplayString("Press but1");
      00007B 90r00r00         [24]  668 	mov	dptr,#___str_0
      00007E 75 F0 80         [24]  669 	mov	b,#0x80
      000081 12r00r00         [24]  670 	lcall	_OLED_DisplayString
                                    671 ;	./src/main.c:90: OLED_SetCursor(3, 10);
      000084 75*00 0A         [24]  672 	mov	_OLED_SetCursor_PARM_2,#0x0a
      000087 75 82 03         [24]  673 	mov	dpl,#0x03
      00008A 12r00r00         [24]  674 	lcall	_OLED_SetCursor
                                    675 ;	./src/main.c:91: OLED_DisplayString("but4 to start");
      00008D 90r00r0B         [24]  676 	mov	dptr,#___str_1
      000090 75 F0 80         [24]  677 	mov	b,#0x80
      000093 12r00r00         [24]  678 	lcall	_OLED_DisplayString
                                    679 ;	./src/main.c:92: OLED_SetCursor(4, 5);
      000096 75*00 05         [24]  680 	mov	_OLED_SetCursor_PARM_2,#0x05
      000099 75 82 04         [24]  681 	mov	dpl,#0x04
      00009C 12r00r00         [24]  682 	lcall	_OLED_SetCursor
                                    683 ;	./src/main.c:93: if (player_bool[1] != 0){
      00009F E5*05            [12]  684 	mov	a,(_player_bool + 0x0001)
      0000A1 60 0B            [24]  685 	jz	00110$
                                    686 ;	./src/main.c:94: OLED_DisplayString("Player1 is ready");
      0000A3 90r00r19         [24]  687 	mov	dptr,#___str_2
      0000A6 75 F0 80         [24]  688 	mov	b,#0x80
      0000A9 12r00r00         [24]  689 	lcall	_OLED_DisplayString
      0000AC 80 09            [24]  690 	sjmp	00111$
      0000AE                        691 00110$:
                                    692 ;	./src/main.c:96: OLED_DisplayString("Wait for player1");
      0000AE 90r00r2A         [24]  693 	mov	dptr,#___str_3
      0000B1 75 F0 80         [24]  694 	mov	b,#0x80
      0000B4 12r00r00         [24]  695 	lcall	_OLED_DisplayString
      0000B7                        696 00111$:
                                    697 ;	./src/main.c:98: OLED_SetCursor(5, 5);
      0000B7 75*00 05         [24]  698 	mov	_OLED_SetCursor_PARM_2,#0x05
      0000BA 75 82 05         [24]  699 	mov	dpl,#0x05
      0000BD 12r00r00         [24]  700 	lcall	_OLED_SetCursor
                                    701 ;	./src/main.c:99: if (player_bool[2] != 0){
      0000C0 E5*06            [12]  702 	mov	a,(_player_bool + 0x0002)
      0000C2 60 0B            [24]  703 	jz	00113$
                                    704 ;	./src/main.c:100: OLED_DisplayString("Player2 is ready");
      0000C4 90r00r3B         [24]  705 	mov	dptr,#___str_4
      0000C7 75 F0 80         [24]  706 	mov	b,#0x80
      0000CA 12r00r00         [24]  707 	lcall	_OLED_DisplayString
      0000CD 80 09            [24]  708 	sjmp	00114$
      0000CF                        709 00113$:
                                    710 ;	./src/main.c:102: OLED_DisplayString("Wait for player2");
      0000CF 90r00r4C         [24]  711 	mov	dptr,#___str_5
      0000D2 75 F0 80         [24]  712 	mov	b,#0x80
      0000D5 12r00r00         [24]  713 	lcall	_OLED_DisplayString
      0000D8                        714 00114$:
                                    715 ;	./src/main.c:105: if (player_bool[1] != 0 && player_bool[2] != 0){
      0000D8 E5*05            [12]  716 	mov	a,(_player_bool + 0x0001)
      0000DA 60 0D            [24]  717 	jz	00118$
      0000DC E5*06            [12]  718 	mov	a,(_player_bool + 0x0002)
      0000DE 60 09            [24]  719 	jz	00118$
                                    720 ;	./src/main.c:106: mode = 1;
      0000E0 75*02 01         [24]  721 	mov	_mode,#0x01
                                    722 ;	./src/main.c:107: player_bool[1] = 0;
      0000E3 75*05 00         [24]  723 	mov	(_player_bool + 0x0001),#0x00
                                    724 ;	./src/main.c:108: player_bool[2] = 0;
      0000E6 75*06 00         [24]  725 	mov	(_player_bool + 0x0002),#0x00
      0000E9                        726 00118$:
                                    727 ;	./src/main.c:110: }
      0000E9 22               [24]  728 	ret
                                    729 ;------------------------------------------------------------
                                    730 ;Allocation info for local variables in function 'mode1'
                                    731 ;------------------------------------------------------------
                                    732 ;	./src/main.c:111: void mode1(void){
                                    733 ;	-----------------------------------------
                                    734 ;	 function mode1
                                    735 ;	-----------------------------------------
      0000EA                        736 _mode1:
                                    737 ;	./src/main.c:112: OLED_Clear();
      0000EA 12r00r00         [24]  738 	lcall	_OLED_Clear
                                    739 ;	./src/main.c:113: OLED_SetCursor(2, 3);
      0000ED 75*00 03         [24]  740 	mov	_OLED_SetCursor_PARM_2,#0x03
      0000F0 75 82 02         [24]  741 	mov	dpl,#0x02
      0000F3 12r00r00         [24]  742 	lcall	_OLED_SetCursor
                                    743 ;	./src/main.c:114: OLED_DisplayString("Player1 setting ");
      0000F6 90r00r5D         [24]  744 	mov	dptr,#___str_6
      0000F9 75 F0 80         [24]  745 	mov	b,#0x80
      0000FC 12r00r00         [24]  746 	lcall	_OLED_DisplayString
                                    747 ;	./src/main.c:116: conti_flag = 0;
      0000FF 75*19 00         [24]  748 	mov	_conti_flag,#0x00
                                    749 ;	./src/main.c:117: nxt_row = 0; nxt_col = 0; 
      000102 75*15 00         [24]  750 	mov	_nxt_row,#0x00
      000105 75*16 00         [24]  751 	mov	_nxt_col,#0x00
                                    752 ;	./src/main.c:118: check_ = 0;
      000108 75*14 00         [24]  753 	mov	_check_,#0x00
                                    754 ;	./src/main.c:120: idx = 0; // 當前要處理的軍艦
      00010B 75*13 00         [24]  755 	mov	_idx,#0x00
                                    756 ;	./src/main.c:121: while (idx < 2){ // 有兩個軍艦要設置
      00010E                        757 00142$:
      00010E 74 FE            [12]  758 	mov	a,#0x100 - 0x02
      000110 25*13            [12]  759 	add	a,_idx
      000112 50 03            [24]  760 	jnc	00304$
      000114 02r04r8C         [24]  761 	ljmp	00144$
      000117                        762 00304$:
                                    763 ;	./src/main.c:122: conti_flag = 0;
      000117 75*19 00         [24]  764 	mov	_conti_flag,#0x00
                                    765 ;	./src/main.c:123: for (tmp_l=0;tmp_l<idx;tmp_l++){ // 先找到一個合法位置，將它設為預設位置
      00011A 75*12 00         [24]  766 	mov	_tmp_l,#0x00
      00011D                        767 00149$:
      00011D C3               [12]  768 	clr	c
      00011E E5*12            [12]  769 	mov	a,_tmp_l
      000120 95*13            [12]  770 	subb	a,_idx
      000122 40 03            [24]  771 	jc	00305$
      000124 02r01rE6         [24]  772 	ljmp	00112$
      000127                        773 00305$:
                                    774 ;	./src/main.c:124: for (tmp_i=1;tmp_i<=8;tmp_i++){
      000127 75*10 01         [24]  775 	mov	_tmp_i,#0x01
      00012A                        776 00146$:
                                    777 ;	./src/main.c:125: for (tmp_j=0;tmp_j<8;tmp_j++){
      00012A 75*11 00         [24]  778 	mov	_tmp_j,#0x00
      00012D                        779 00145$:
                                    780 ;	./src/main.c:126: if (conti_flag != 0)break;;
      00012D E5*19            [12]  781 	mov	a,_conti_flag
      00012F 60 03            [24]  782 	jz	00306$
      000131 02r01rD6         [24]  783 	ljmp	00147$
      000134                        784 00306$:
                                    785 ;	./src/main.c:127: if (tmp_j+boat_type[idx][1]-1 > 7 ){continue;} // 邊界檢查
      000134 AE*11            [24]  786 	mov	r6,_tmp_j
      000136 7F 00            [12]  787 	mov	r7,#0x00
      000138 E5*13            [12]  788 	mov	a,_idx
      00013A 25*13            [12]  789 	add	a,_idx
      00013C FD               [12]  790 	mov	r5,a
      00013D 24r09            [12]  791 	add	a,#_boat_type
      00013F 04               [12]  792 	inc	a
      000140 F9               [12]  793 	mov	r1,a
      000141 87 04            [24]  794 	mov	ar4,@r1
      000143 7B 00            [12]  795 	mov	r3,#0x00
      000145 EC               [12]  796 	mov	a,r4
      000146 2E               [12]  797 	add	a,r6
      000147 FE               [12]  798 	mov	r6,a
      000148 EB               [12]  799 	mov	a,r3
      000149 3F               [12]  800 	addc	a,r7
      00014A FF               [12]  801 	mov	r7,a
      00014B 1E               [12]  802 	dec	r6
      00014C BE FF 01         [24]  803 	cjne	r6,#0xff,00307$
      00014F 1F               [12]  804 	dec	r7
      000150                        805 00307$:
      000150 C3               [12]  806 	clr	c
      000151 74 07            [12]  807 	mov	a,#0x07
      000153 9E               [12]  808 	subb	a,r6
      000154 74 80            [12]  809 	mov	a,#(0x00 ^ 0x80)
      000156 8F F0            [24]  810 	mov	b,r7
      000158 63 F0 80         [24]  811 	xrl	b,#0x80
      00015B 95 F0            [12]  812 	subb	a,b
      00015D 40 6C            [24]  813 	jc	00109$
                                    814 ;	./src/main.c:128: if (tmp_i+boat_type[idx][0]-1 > 8){continue;}
      00015F AE*10            [24]  815 	mov	r6,_tmp_i
      000161 7F 00            [12]  816 	mov	r7,#0x00
      000163 ED               [12]  817 	mov	a,r5
      000164 24r09            [12]  818 	add	a,#_boat_type
      000166 F9               [12]  819 	mov	r1,a
      000167 87 05            [24]  820 	mov	ar5,@r1
      000169 8D 03            [24]  821 	mov	ar3,r5
      00016B 7C 00            [12]  822 	mov	r4,#0x00
      00016D EB               [12]  823 	mov	a,r3
      00016E 2E               [12]  824 	add	a,r6
      00016F FE               [12]  825 	mov	r6,a
      000170 EC               [12]  826 	mov	a,r4
      000171 3F               [12]  827 	addc	a,r7
      000172 FF               [12]  828 	mov	r7,a
      000173 1E               [12]  829 	dec	r6
      000174 BE FF 01         [24]  830 	cjne	r6,#0xff,00309$
      000177 1F               [12]  831 	dec	r7
      000178                        832 00309$:
      000178 C3               [12]  833 	clr	c
      000179 74 08            [12]  834 	mov	a,#0x08
      00017B 9E               [12]  835 	subb	a,r6
      00017C 74 80            [12]  836 	mov	a,#(0x00 ^ 0x80)
      00017E 8F F0            [24]  837 	mov	b,r7
      000180 63 F0 80         [24]  838 	xrl	b,#0x80
      000183 95 F0            [12]  839 	subb	a,b
      000185 40 44            [24]  840 	jc	00109$
                                    841 ;	./src/main.c:129: if (overlap(tmp_i, tmp_j, boat_type[idx][0], boat_type[idx][1],
      000187 09               [12]  842 	inc	r1
      000188 87*02            [24]  843 	mov	_overlap_PARM_4,@r1
                                    844 ;	./src/main.c:130: player1[tmp_l][0], player1[tmp_l][1], boat_type[tmp_l][0], boat_type[tmp_l][1]) != 1){ 
      00018A E5*12            [12]  845 	mov	a,_tmp_l
      00018C 25*12            [12]  846 	add	a,_tmp_l
      00018E FF               [12]  847 	mov	r7,a
      00018F 24r1C            [12]  848 	add	a,#_player1
      000191 F9               [12]  849 	mov	r1,a
      000192 87*03            [24]  850 	mov	_overlap_PARM_5,@r1
      000194 09               [12]  851 	inc	r1
      000195 87*04            [24]  852 	mov	_overlap_PARM_6,@r1
      000197 EF               [12]  853 	mov	a,r7
      000198 24r09            [12]  854 	add	a,#_boat_type
      00019A F9               [12]  855 	mov	r1,a
      00019B 87*05            [24]  856 	mov	_overlap_PARM_7,@r1
      00019D 09               [12]  857 	inc	r1
      00019E 87*06            [24]  858 	mov	_overlap_PARM_8,@r1
      0001A0 85*11*00         [24]  859 	mov	_overlap_PARM_2,_tmp_j
      0001A3 8D*01            [24]  860 	mov	_overlap_PARM_3,r5
      0001A5 85*10 82         [24]  861 	mov	dpl,_tmp_i
      0001A8 12r0Br75         [24]  862 	lcall	_overlap
      0001AB AF 82            [24]  863 	mov	r7,dpl
      0001AD BF 01 02         [24]  864 	cjne	r7,#0x01,00311$
      0001B0 80 19            [24]  865 	sjmp	00109$
      0001B2                        866 00311$:
                                    867 ;	./src/main.c:132: player1[idx][0] = tmp_i;
      0001B2 E5*13            [12]  868 	mov	a,_idx
      0001B4 25*13            [12]  869 	add	a,_idx
      0001B6 24r1C            [12]  870 	add	a,#_player1
      0001B8 F8               [12]  871 	mov	r0,a
      0001B9 A6*10            [24]  872 	mov	@r0,_tmp_i
                                    873 ;	./src/main.c:133: player1[idx][1] = tmp_j; // 將他們儲存
      0001BB E5*13            [12]  874 	mov	a,_idx
      0001BD 25*13            [12]  875 	add	a,_idx
      0001BF 24r1C            [12]  876 	add	a,#_player1
      0001C1 FF               [12]  877 	mov	r7,a
      0001C2 04               [12]  878 	inc	a
      0001C3 F8               [12]  879 	mov	r0,a
      0001C4 A6*11            [24]  880 	mov	@r0,_tmp_j
                                    881 ;	./src/main.c:134: conti_flag = 1;
      0001C6 75*19 01         [24]  882 	mov	_conti_flag,#0x01
                                    883 ;	./src/main.c:135: break;
      0001C9 80 0B            [24]  884 	sjmp	00147$
      0001CB                        885 00109$:
                                    886 ;	./src/main.c:125: for (tmp_j=0;tmp_j<8;tmp_j++){
      0001CB 05*11            [12]  887 	inc	_tmp_j
      0001CD 74 F8            [12]  888 	mov	a,#0x100 - 0x08
      0001CF 25*11            [12]  889 	add	a,_tmp_j
      0001D1 40 03            [24]  890 	jc	00312$
      0001D3 02r01r2D         [24]  891 	ljmp	00145$
      0001D6                        892 00312$:
      0001D6                        893 00147$:
                                    894 ;	./src/main.c:124: for (tmp_i=1;tmp_i<=8;tmp_i++){
      0001D6 05*10            [12]  895 	inc	_tmp_i
      0001D8 E5*10            [12]  896 	mov	a,_tmp_i
      0001DA 24 F7            [12]  897 	add	a,#0xff - 0x08
      0001DC 40 03            [24]  898 	jc	00313$
      0001DE 02r01r2A         [24]  899 	ljmp	00146$
      0001E1                        900 00313$:
                                    901 ;	./src/main.c:123: for (tmp_l=0;tmp_l<idx;tmp_l++){ // 先找到一個合法位置，將它設為預設位置
      0001E1 05*12            [12]  902 	inc	_tmp_l
      0001E3 02r01r1D         [24]  903 	ljmp	00149$
      0001E6                        904 00112$:
                                    905 ;	./src/main.c:141: check_ = 1;
      0001E6 75*14 01         [24]  906 	mov	_check_,#0x01
                                    907 ;	./src/main.c:142: OLED_SetCursor(3, 3);
      0001E9 75*00 03         [24]  908 	mov	_OLED_SetCursor_PARM_2,#0x03
      0001EC 75 82 03         [24]  909 	mov	dpl,#0x03
      0001EF 12r00r00         [24]  910 	lcall	_OLED_SetCursor
                                    911 ;	./src/main.c:143: OLED_DisplayString("setting ");
      0001F2 90r00r6E         [24]  912 	mov	dptr,#___str_7
      0001F5 75 F0 80         [24]  913 	mov	b,#0x80
      0001F8 12r00r00         [24]  914 	lcall	_OLED_DisplayString
                                    915 ;	./src/main.c:144: OLED_DisplayChar('0' + idx);
      0001FB AF*13            [24]  916 	mov	r7,_idx
      0001FD 74 30            [12]  917 	mov	a,#0x30
      0001FF 2F               [12]  918 	add	a,r7
      000200 F5 82            [12]  919 	mov	dpl,a
      000202 12r00r00         [24]  920 	lcall	_OLED_DisplayChar
                                    921 ;	./src/main.c:146: draw(player1[idx][0], player1[idx][1], player1[idx][0]+boat_type[idx][0]-1, player1[idx][1]+boat_type[idx][1]-1, 0); 
      000205 E5*13            [12]  922 	mov	a,_idx
      000207 25*13            [12]  923 	add	a,_idx
      000209 FF               [12]  924 	mov	r7,a
      00020A 24r1C            [12]  925 	add	a,#_player1
      00020C F9               [12]  926 	mov	r1,a
      00020D 87 06            [24]  927 	mov	ar6,@r1
      00020F 09               [12]  928 	inc	r1
      000210 87 05            [24]  929 	mov	ar5,@r1
      000212 EF               [12]  930 	mov	a,r7
      000213 24r09            [12]  931 	add	a,#_boat_type
      000215 F9               [12]  932 	mov	r1,a
      000216 E7               [12]  933 	mov	a,@r1
      000217 2E               [12]  934 	add	a,r6
      000218 14               [12]  935 	dec	a
      000219 F5*01            [12]  936 	mov	_draw_PARM_3,a
      00021B 09               [12]  937 	inc	r1
      00021C E7               [12]  938 	mov	a,@r1
      00021D 2D               [12]  939 	add	a,r5
      00021E 14               [12]  940 	dec	a
      00021F F5*02            [12]  941 	mov	_draw_PARM_4,a
      000221 8D*00            [24]  942 	mov	_draw_PARM_2,r5
      000223 75*03 00         [24]  943 	mov	_draw_PARM_5,#0x00
      000226 8E 82            [24]  944 	mov	dpl,r6
      000228 12r0Cr9D         [24]  945 	lcall	_draw
                                    946 ;	./src/main.c:147: while (check_){
      00022B                        947 00139$:
      00022B E5*14            [12]  948 	mov	a,_check_
      00022D 70 03            [24]  949 	jnz	00314$
      00022F 02r01r0E         [24]  950 	ljmp	00142$
      000232                        951 00314$:
                                    952 ;	./src/main.c:148: OLED_SetCursor(4, 3);
      000232 75*00 03         [24]  953 	mov	_OLED_SetCursor_PARM_2,#0x03
      000235 75 82 04         [24]  954 	mov	dpl,#0x04
      000238 12r00r00         [24]  955 	lcall	_OLED_SetCursor
                                    956 ;	./src/main.c:149: OLED_DisplayString("set row: ");
      00023B 90r00r77         [24]  957 	mov	dptr,#___str_8
      00023E 75 F0 80         [24]  958 	mov	b,#0x80
      000241 12r00r00         [24]  959 	lcall	_OLED_DisplayString
                                    960 ;	./src/main.c:150: OLED_DisplayChar('0' + player1[idx][1]); // 當前軍艦左上角的座標
      000244 E5*13            [12]  961 	mov	a,_idx
      000246 25*13            [12]  962 	add	a,_idx
      000248 24r1C            [12]  963 	add	a,#_player1
      00024A 04               [12]  964 	inc	a
      00024B F9               [12]  965 	mov	r1,a
      00024C 87 07            [24]  966 	mov	ar7,@r1
      00024E 74 30            [12]  967 	mov	a,#0x30
      000250 2F               [12]  968 	add	a,r7
      000251 F5 82            [12]  969 	mov	dpl,a
      000253 12r00r00         [24]  970 	lcall	_OLED_DisplayChar
                                    971 ;	./src/main.c:151: OLED_SetCursor(5, 3);
      000256 75*00 03         [24]  972 	mov	_OLED_SetCursor_PARM_2,#0x03
      000259 75 82 05         [24]  973 	mov	dpl,#0x05
      00025C 12r00r00         [24]  974 	lcall	_OLED_SetCursor
                                    975 ;	./src/main.c:152: OLED_DisplayString("set col: ");
      00025F 90r00r81         [24]  976 	mov	dptr,#___str_9
      000262 75 F0 80         [24]  977 	mov	b,#0x80
      000265 12r00r00         [24]  978 	lcall	_OLED_DisplayString
                                    979 ;	./src/main.c:153: OLED_DisplayChar('0' + player1[idx][0]);
      000268 E5*13            [12]  980 	mov	a,_idx
      00026A 25*13            [12]  981 	add	a,_idx
      00026C 24r1C            [12]  982 	add	a,#_player1
      00026E F9               [12]  983 	mov	r1,a
      00026F 87 07            [24]  984 	mov	ar7,@r1
      000271 74 30            [12]  985 	mov	a,#0x30
      000273 2F               [12]  986 	add	a,r7
      000274 F5 82            [12]  987 	mov	dpl,a
      000276 12r00r00         [24]  988 	lcall	_OLED_DisplayChar
                                    989 ;	./src/main.c:156: now_key = Get_Key();
      000279 12r00r00         [24]  990 	lcall	_Get_Key
      00027C AE 82            [24]  991 	mov	r6,dpl
      00027E AF 83            [24]  992 	mov	r7,dph
                                    993 ;	./src/main.c:157: if (now_key != 0){
      000280 EE               [12]  994 	mov	a,r6
      000281 F5*08            [12]  995 	mov	_now_key,a
      000283 70 03            [24]  996 	jnz	00315$
      000285 02r04r2D         [24]  997 	ljmp	00129$
      000288                        998 00315$:
                                    999 ;	./src/main.c:158: delay_ms(10);
      000288 90 00 0A         [24] 1000 	mov	dptr,#0x000a
      00028B 12r00r00         [24] 1001 	lcall	_delay_ms
                                   1002 ;	./src/main.c:159: if (Get_Key() == now_key){ // 按鍵控制+邊界處理
      00028E 12r00r00         [24] 1003 	lcall	_Get_Key
      000291 AE 82            [24] 1004 	mov	r6,dpl
      000293 AF 83            [24] 1005 	mov	r7,dph
      000295 AC*08            [24] 1006 	mov	r4,_now_key
      000297 7D 00            [12] 1007 	mov	r5,#0x00
      000299 EE               [12] 1008 	mov	a,r6
      00029A B5 04 06         [24] 1009 	cjne	a,ar4,00316$
      00029D EF               [12] 1010 	mov	a,r7
      00029E B5 05 02         [24] 1011 	cjne	a,ar5,00316$
      0002A1 80 03            [24] 1012 	sjmp	00317$
      0002A3                       1013 00316$:
      0002A3 02r04r2D         [24] 1014 	ljmp	00129$
      0002A6                       1015 00317$:
                                   1016 ;	./src/main.c:160: nxt_col = player1[idx][0];nxt_row = player1[idx][1];
      0002A6 E5*13            [12] 1017 	mov	a,_idx
      0002A8 25*13            [12] 1018 	add	a,_idx
      0002AA FF               [12] 1019 	mov	r7,a
      0002AB 24r1C            [12] 1020 	add	a,#_player1
      0002AD F9               [12] 1021 	mov	r1,a
      0002AE 87*16            [24] 1022 	mov	_nxt_col,@r1
      0002B0 09               [12] 1023 	inc	r1
      0002B1 87*15            [24] 1024 	mov	_nxt_row,@r1
                                   1025 ;	./src/main.c:161: if (now_key == 1){// up r
      0002B3 74 01            [12] 1026 	mov	a,#0x01
      0002B5 B5*08 1C         [24] 1027 	cjne	a,_now_key,00114$
                                   1028 ;	./src/main.c:162: nxt_row = (player1[idx][1] <= 0)? player1[idx][1]:player1[idx][1]-1;
      0002B8 EF               [12] 1029 	mov	a,r7
      0002B9 24r1C            [12] 1030 	add	a,#_player1
      0002BB 04               [12] 1031 	inc	a
      0002BC F9               [12] 1032 	mov	r1,a
      0002BD E7               [12] 1033 	mov	a,@r1
      0002BE 70 09            [24] 1034 	jnz	00160$
      0002C0 EF               [12] 1035 	mov	a,r7
      0002C1 24r1C            [12] 1036 	add	a,#_player1
      0002C3 04               [12] 1037 	inc	a
      0002C4 F9               [12] 1038 	mov	r1,a
      0002C5 87 06            [24] 1039 	mov	ar6,@r1
      0002C7 80 09            [24] 1040 	sjmp	00161$
      0002C9                       1041 00160$:
      0002C9 EF               [12] 1042 	mov	a,r7
      0002CA 24r1C            [12] 1043 	add	a,#_player1
      0002CC 04               [12] 1044 	inc	a
      0002CD F9               [12] 1045 	mov	r1,a
      0002CE E7               [12] 1046 	mov	a,@r1
      0002CF FF               [12] 1047 	mov	r7,a
      0002D0 14               [12] 1048 	dec	a
      0002D1 FE               [12] 1049 	mov	r6,a
      0002D2                       1050 00161$:
      0002D2 8E*15            [24] 1051 	mov	_nxt_row,r6
      0002D4                       1052 00114$:
                                   1053 ;	./src/main.c:163: }if (now_key == 2){ // down r
      0002D4 74 02            [12] 1054 	mov	a,#0x02
      0002D6 B5*08 42         [24] 1055 	cjne	a,_now_key,00116$
                                   1056 ;	./src/main.c:164: nxt_row = (player1[idx][1]+boat_type[idx][1]-1 >= 7)? player1[idx][1]:player1[idx][1]+1;
      0002D9 E5*13            [12] 1057 	mov	a,_idx
      0002DB 25*13            [12] 1058 	add	a,_idx
      0002DD FF               [12] 1059 	mov	r7,a
      0002DE 24r1C            [12] 1060 	add	a,#_player1
      0002E0 04               [12] 1061 	inc	a
      0002E1 F9               [12] 1062 	mov	r1,a
      0002E2 87 06            [24] 1063 	mov	ar6,@r1
      0002E4 7D 00            [12] 1064 	mov	r5,#0x00
      0002E6 EF               [12] 1065 	mov	a,r7
      0002E7 24r09            [12] 1066 	add	a,#_boat_type
      0002E9 04               [12] 1067 	inc	a
      0002EA F9               [12] 1068 	mov	r1,a
      0002EB 87 04            [24] 1069 	mov	ar4,@r1
      0002ED 7B 00            [12] 1070 	mov	r3,#0x00
      0002EF EC               [12] 1071 	mov	a,r4
      0002F0 2E               [12] 1072 	add	a,r6
      0002F1 FE               [12] 1073 	mov	r6,a
      0002F2 EB               [12] 1074 	mov	a,r3
      0002F3 3D               [12] 1075 	addc	a,r5
      0002F4 FD               [12] 1076 	mov	r5,a
      0002F5 1E               [12] 1077 	dec	r6
      0002F6 BE FF 01         [24] 1078 	cjne	r6,#0xff,00323$
      0002F9 1D               [12] 1079 	dec	r5
      0002FA                       1080 00323$:
      0002FA C3               [12] 1081 	clr	c
      0002FB EE               [12] 1082 	mov	a,r6
      0002FC 94 07            [12] 1083 	subb	a,#0x07
      0002FE ED               [12] 1084 	mov	a,r5
      0002FF 64 80            [12] 1085 	xrl	a,#0x80
      000301 94 80            [12] 1086 	subb	a,#0x80
      000303 92*00            [24] 1087 	mov	_mode1_sloc0_1_0,c
      000305 40 09            [24] 1088 	jc	00162$
      000307 EF               [12] 1089 	mov	a,r7
      000308 24r1C            [12] 1090 	add	a,#_player1
      00030A 04               [12] 1091 	inc	a
      00030B F9               [12] 1092 	mov	r1,a
      00030C 87 06            [24] 1093 	mov	ar6,@r1
      00030E 80 09            [24] 1094 	sjmp	00163$
      000310                       1095 00162$:
      000310 EF               [12] 1096 	mov	a,r7
      000311 24r1C            [12] 1097 	add	a,#_player1
      000313 04               [12] 1098 	inc	a
      000314 F9               [12] 1099 	mov	r1,a
      000315 E7               [12] 1100 	mov	a,@r1
      000316 FF               [12] 1101 	mov	r7,a
      000317 04               [12] 1102 	inc	a
      000318 FE               [12] 1103 	mov	r6,a
      000319                       1104 00163$:
      000319 8E*15            [24] 1105 	mov	_nxt_row,r6
      00031B                       1106 00116$:
                                   1107 ;	./src/main.c:166: if (now_key == 5){// left r
      00031B 74 05            [12] 1108 	mov	a,#0x05
      00031D B5*08 18         [24] 1109 	cjne	a,_now_key,00118$
                                   1110 ;	./src/main.c:167: nxt_col = (player1[idx][0] <= 1)? player1[idx][0]:player1[idx][0]-1;
      000320 E5*13            [12] 1111 	mov	a,_idx
      000322 25*13            [12] 1112 	add	a,_idx
      000324 24r1C            [12] 1113 	add	a,#_player1
      000326 F9               [12] 1114 	mov	r1,a
      000327 E7               [12] 1115 	mov	a,@r1
      000328 FF               [12] 1116 	mov	r7,a
      000329 24 FE            [12] 1117 	add	a,#0xff - 0x01
      00032B 92*00            [24] 1118 	mov	_mode1_sloc0_1_0,c
      00032D 40 04            [24] 1119 	jc	00164$
      00032F 8F 06            [24] 1120 	mov	ar6,r7
      000331 80 03            [24] 1121 	sjmp	00165$
      000333                       1122 00164$:
      000333 EF               [12] 1123 	mov	a,r7
      000334 14               [12] 1124 	dec	a
      000335 FE               [12] 1125 	mov	r6,a
      000336                       1126 00165$:
      000336 8E*16            [24] 1127 	mov	_nxt_col,r6
      000338                       1128 00118$:
                                   1129 ;	./src/main.c:169: if (now_key == 6){// right r
      000338 74 06            [12] 1130 	mov	a,#0x06
      00033A B5*08 37         [24] 1131 	cjne	a,_now_key,00120$
                                   1132 ;	./src/main.c:170: nxt_col = (player1[idx][0]+boat_type[idx][0]-1 >= 8)? player1[idx][0]:player1[idx][0]+1;
      00033D E5*13            [12] 1133 	mov	a,_idx
      00033F 25*13            [12] 1134 	add	a,_idx
      000341 FF               [12] 1135 	mov	r7,a
      000342 24r1C            [12] 1136 	add	a,#_player1
      000344 F9               [12] 1137 	mov	r1,a
      000345 87 06            [24] 1138 	mov	ar6,@r1
      000347 8E 04            [24] 1139 	mov	ar4,r6
      000349 7D 00            [12] 1140 	mov	r5,#0x00
      00034B EF               [12] 1141 	mov	a,r7
      00034C 24r09            [12] 1142 	add	a,#_boat_type
      00034E F9               [12] 1143 	mov	r1,a
      00034F 87 07            [24] 1144 	mov	ar7,@r1
      000351 7B 00            [12] 1145 	mov	r3,#0x00
      000353 EF               [12] 1146 	mov	a,r7
      000354 2C               [12] 1147 	add	a,r4
      000355 FC               [12] 1148 	mov	r4,a
      000356 EB               [12] 1149 	mov	a,r3
      000357 3D               [12] 1150 	addc	a,r5
      000358 FD               [12] 1151 	mov	r5,a
      000359 1C               [12] 1152 	dec	r4
      00035A BC FF 01         [24] 1153 	cjne	r4,#0xff,00330$
      00035D 1D               [12] 1154 	dec	r5
      00035E                       1155 00330$:
      00035E C3               [12] 1156 	clr	c
      00035F EC               [12] 1157 	mov	a,r4
      000360 94 08            [12] 1158 	subb	a,#0x08
      000362 ED               [12] 1159 	mov	a,r5
      000363 64 80            [12] 1160 	xrl	a,#0x80
      000365 94 80            [12] 1161 	subb	a,#0x80
      000367 92*00            [24] 1162 	mov	_mode1_sloc0_1_0,c
      000369 40 04            [24] 1163 	jc	00166$
      00036B 8E 07            [24] 1164 	mov	ar7,r6
      00036D 80 03            [24] 1165 	sjmp	00167$
      00036F                       1166 00166$:
      00036F EE               [12] 1167 	mov	a,r6
      000370 04               [12] 1168 	inc	a
      000371 FF               [12] 1169 	mov	r7,a
      000372                       1170 00167$:
      000372 8F*16            [24] 1171 	mov	_nxt_col,r7
      000374                       1172 00120$:
                                   1173 ;	./src/main.c:173: for (l=0;l<idx;l++){ // 檢查這個位置是否合法(有無重疊?)
      000374 75*0F 00         [24] 1174 	mov	_l,#0x00
      000377                       1175 00152$:
      000377 C3               [12] 1176 	clr	c
      000378 E5*0F            [12] 1177 	mov	a,_l
      00037A 95*13            [12] 1178 	subb	a,_idx
      00037C 50 3C            [24] 1179 	jnc	00123$
                                   1180 ;	./src/main.c:174: conti_flag = 0;
      00037E 75*19 00         [24] 1181 	mov	_conti_flag,#0x00
                                   1182 ;	./src/main.c:175: if (overlap(nxt_col, nxt_row, boat_type[idx][0], boat_type[idx][1],
      000381 E5*13            [12] 1183 	mov	a,_idx
      000383 25*13            [12] 1184 	add	a,_idx
      000385 24r09            [12] 1185 	add	a,#_boat_type
      000387 F9               [12] 1186 	mov	r1,a
      000388 87*01            [24] 1187 	mov	_overlap_PARM_3,@r1
      00038A 09               [12] 1188 	inc	r1
      00038B 87*02            [24] 1189 	mov	_overlap_PARM_4,@r1
                                   1190 ;	./src/main.c:176: player1[l][0], player1[l][1], boat_type[l][0], boat_type[l][1]) == 1){
      00038D E5*0F            [12] 1191 	mov	a,_l
      00038F 25*0F            [12] 1192 	add	a,_l
      000391 FF               [12] 1193 	mov	r7,a
      000392 24r1C            [12] 1194 	add	a,#_player1
      000394 F9               [12] 1195 	mov	r1,a
      000395 87*03            [24] 1196 	mov	_overlap_PARM_5,@r1
      000397 09               [12] 1197 	inc	r1
      000398 87*04            [24] 1198 	mov	_overlap_PARM_6,@r1
      00039A EF               [12] 1199 	mov	a,r7
      00039B 24r09            [12] 1200 	add	a,#_boat_type
      00039D F9               [12] 1201 	mov	r1,a
      00039E 87*05            [24] 1202 	mov	_overlap_PARM_7,@r1
      0003A0 09               [12] 1203 	inc	r1
      0003A1 87*06            [24] 1204 	mov	_overlap_PARM_8,@r1
      0003A3 85*15*00         [24] 1205 	mov	_overlap_PARM_2,_nxt_row
      0003A6 85*16 82         [24] 1206 	mov	dpl,_nxt_col
      0003A9 12r0Br75         [24] 1207 	lcall	_overlap
      0003AC AF 82            [24] 1208 	mov	r7,dpl
      0003AE BF 01 05         [24] 1209 	cjne	r7,#0x01,00153$
                                   1210 ;	./src/main.c:177: conti_flag = 1;
      0003B1 75*19 01         [24] 1211 	mov	_conti_flag,#0x01
                                   1212 ;	./src/main.c:178: break;;
      0003B4 80 04            [24] 1213 	sjmp	00123$
      0003B6                       1214 00153$:
                                   1215 ;	./src/main.c:173: for (l=0;l<idx;l++){ // 檢查這個位置是否合法(有無重疊?)
      0003B6 05*0F            [12] 1216 	inc	_l
      0003B8 80 BD            [24] 1217 	sjmp	00152$
      0003BA                       1218 00123$:
                                   1219 ;	./src/main.c:181: if (conti_flag == 1){ // 不合法，繼續執行
      0003BA 74 01            [12] 1220 	mov	a,#0x01
      0003BC B5*19 06         [24] 1221 	cjne	a,_conti_flag,00125$
                                   1222 ;	./src/main.c:182: conti_flag = 0;
      0003BF 75*19 00         [24] 1223 	mov	_conti_flag,#0x00
                                   1224 ;	./src/main.c:183: continue;
      0003C2 02r02r2B         [24] 1225 	ljmp	00139$
      0003C5                       1226 00125$:
                                   1227 ;	./src/main.c:191: del(player1[idx][0], player1[idx][1], player1[idx][0]+boat_type[idx][0]-1, player1[idx][1]+boat_type[idx][1]-1, 0); 
      0003C5 E5*13            [12] 1228 	mov	a,_idx
      0003C7 25*13            [12] 1229 	add	a,_idx
      0003C9 FF               [12] 1230 	mov	r7,a
      0003CA 24r1C            [12] 1231 	add	a,#_player1
      0003CC F9               [12] 1232 	mov	r1,a
      0003CD 87 06            [24] 1233 	mov	ar6,@r1
      0003CF 09               [12] 1234 	inc	r1
      0003D0 87 05            [24] 1235 	mov	ar5,@r1
      0003D2 EF               [12] 1236 	mov	a,r7
      0003D3 24r09            [12] 1237 	add	a,#_boat_type
      0003D5 F9               [12] 1238 	mov	r1,a
      0003D6 E7               [12] 1239 	mov	a,@r1
      0003D7 2E               [12] 1240 	add	a,r6
      0003D8 14               [12] 1241 	dec	a
      0003D9 F5*01            [12] 1242 	mov	_del_PARM_3,a
      0003DB 09               [12] 1243 	inc	r1
      0003DC E7               [12] 1244 	mov	a,@r1
      0003DD 2D               [12] 1245 	add	a,r5
      0003DE 14               [12] 1246 	dec	a
      0003DF F5*02            [12] 1247 	mov	_del_PARM_4,a
      0003E1 8D*00            [24] 1248 	mov	_del_PARM_2,r5
      0003E3 75*03 00         [24] 1249 	mov	_del_PARM_5,#0x00
      0003E6 8E 82            [24] 1250 	mov	dpl,r6
      0003E8 12r0Cr1F         [24] 1251 	lcall	_del
                                   1252 ;	./src/main.c:192: player1[idx][1] = nxt_row;
      0003EB E5*13            [12] 1253 	mov	a,_idx
      0003ED 25*13            [12] 1254 	add	a,_idx
      0003EF 24r1C            [12] 1255 	add	a,#_player1
      0003F1 04               [12] 1256 	inc	a
      0003F2 F8               [12] 1257 	mov	r0,a
      0003F3 A6*15            [24] 1258 	mov	@r0,_nxt_row
                                   1259 ;	./src/main.c:193: player1[idx][0] = nxt_col;
      0003F5 E5*13            [12] 1260 	mov	a,_idx
      0003F7 25*13            [12] 1261 	add	a,_idx
      0003F9 24r1C            [12] 1262 	add	a,#_player1
      0003FB F8               [12] 1263 	mov	r0,a
      0003FC A6*16            [24] 1264 	mov	@r0,_nxt_col
                                   1265 ;	./src/main.c:195: draw(player1[idx][0], player1[idx][1], player1[idx][0]+boat_type[idx][0]-1, player1[idx][1]+boat_type[idx][1]-1, 0);
      0003FE E5*13            [12] 1266 	mov	a,_idx
      000400 25*13            [12] 1267 	add	a,_idx
      000402 FF               [12] 1268 	mov	r7,a
      000403 24r1C            [12] 1269 	add	a,#_player1
      000405 F9               [12] 1270 	mov	r1,a
      000406 87 06            [24] 1271 	mov	ar6,@r1
      000408 09               [12] 1272 	inc	r1
      000409 87 05            [24] 1273 	mov	ar5,@r1
      00040B EF               [12] 1274 	mov	a,r7
      00040C 24r09            [12] 1275 	add	a,#_boat_type
      00040E F9               [12] 1276 	mov	r1,a
      00040F E7               [12] 1277 	mov	a,@r1
      000410 2E               [12] 1278 	add	a,r6
      000411 14               [12] 1279 	dec	a
      000412 F5*01            [12] 1280 	mov	_draw_PARM_3,a
      000414 09               [12] 1281 	inc	r1
      000415 E7               [12] 1282 	mov	a,@r1
      000416 2D               [12] 1283 	add	a,r5
      000417 14               [12] 1284 	dec	a
      000418 F5*02            [12] 1285 	mov	_draw_PARM_4,a
      00041A 8D*00            [24] 1286 	mov	_draw_PARM_2,r5
      00041C 75*03 00         [24] 1287 	mov	_draw_PARM_5,#0x00
      00041F 8E 82            [24] 1288 	mov	dpl,r6
      000421 12r0Cr9D         [24] 1289 	lcall	_draw
                                   1290 ;	./src/main.c:196: now_key = 0;
      000424 75*08 00         [24] 1291 	mov	_now_key,#0x00
                                   1292 ;	./src/main.c:197: delay_ms(100);
      000427 90 00 64         [24] 1293 	mov	dptr,#0x0064
      00042A 12r00r00         [24] 1294 	lcall	_delay_ms
      00042D                       1295 00129$:
                                   1296 ;	./src/main.c:201: for (i=1;i<=8;i++){
      00042D 75*0D 01         [24] 1297 	mov	_i,#0x01
      000430                       1298 00154$:
                                   1299 ;	./src/main.c:202: Writesingle7219(2, i, mat1_1[i]);
      000430 E5*0D            [12] 1300 	mov	a,_i
      000432 24r2D            [12] 1301 	add	a,#_mat1_1
      000434 F9               [12] 1302 	mov	r1,a
      000435 87*00            [24] 1303 	mov	_Writesingle7219_PARM_3,@r1
      000437 85*0D*00         [24] 1304 	mov	_Writesingle7219_PARM_2,_i
      00043A 75 82 02         [24] 1305 	mov	dpl,#0x02
      00043D 12r00r00         [24] 1306 	lcall	_Writesingle7219
                                   1307 ;	./src/main.c:201: for (i=1;i<=8;i++){
      000440 05*0D            [12] 1308 	inc	_i
      000442 E5*0D            [12] 1309 	mov	a,_i
      000444 24 F7            [12] 1310 	add	a,#0xff - 0x08
      000446 50 E8            [24] 1311 	jnc	00154$
                                   1312 ;	./src/main.c:204: if (but1 == 0){
      000448 30 B2 03         [24] 1313 	jnb	_INT0,00338$
      00044B 02r02r2B         [24] 1314 	ljmp	00139$
      00044E                       1315 00338$:
                                   1316 ;	./src/main.c:205: delay_ms(10);
      00044E 90 00 0A         [24] 1317 	mov	dptr,#0x000a
      000451 12r00r00         [24] 1318 	lcall	_delay_ms
                                   1319 ;	./src/main.c:206: if (but1 == 0){
      000454 30 B2 03         [24] 1320 	jnb	_INT0,00339$
      000457 02r02r2B         [24] 1321 	ljmp	00139$
      00045A                       1322 00339$:
                                   1323 ;	./src/main.c:207: idx+=1;
      00045A E5*13            [12] 1324 	mov	a,_idx
      00045C FF               [12] 1325 	mov	r7,a
      00045D 04               [12] 1326 	inc	a
      00045E F5*13            [12] 1327 	mov	_idx,a
                                   1328 ;	./src/main.c:208: check_ = 0;
                                   1329 ;	./src/main.c:209: for(in_i = 0;in_i < 588;in_i++){
      000460 E4               [12] 1330 	clr	a
      000461 F5*14            [12] 1331 	mov	_check_,a
      000463 F5*00            [12] 1332 	mov	_in_i,a
      000465 F5*01            [12] 1333 	mov	(_in_i + 1),a
      000467                       1334 00156$:
                                   1335 ;	./src/main.c:210: P3_7 = 1;
                                   1336 ;	assignBit
      000467 D2 B7            [12] 1337 	setb	_P3_7
                                   1338 ;	./src/main.c:211: Delay_Re(); // 發出Re的音
      000469 12r00r00         [24] 1339 	lcall	_Delay_Re
                                   1340 ;	./src/main.c:212: P3_7 = 0;
                                   1341 ;	assignBit
      00046C C2 B7            [12] 1342 	clr	_P3_7
                                   1343 ;	./src/main.c:213: Delay_Re();
      00046E 12r00r00         [24] 1344 	lcall	_Delay_Re
                                   1345 ;	./src/main.c:209: for(in_i = 0;in_i < 588;in_i++){
      000471 05*00            [12] 1346 	inc	_in_i
      000473 E4               [12] 1347 	clr	a
      000474 B5*00 02         [24] 1348 	cjne	a,_in_i,00340$
      000477 05*01            [12] 1349 	inc	(_in_i + 1)
      000479                       1350 00340$:
      000479 C3               [12] 1351 	clr	c
      00047A E5*00            [12] 1352 	mov	a,_in_i
      00047C 94 4C            [12] 1353 	subb	a,#0x4c
      00047E E5*01            [12] 1354 	mov	a,(_in_i + 1)
      000480 64 80            [12] 1355 	xrl	a,#0x80
      000482 94 82            [12] 1356 	subb	a,#0x82
      000484 40 E1            [24] 1357 	jc	00156$
                                   1358 ;	./src/main.c:215: while (but1 == 0);
      000486                       1359 00132$:
      000486 30 B2 FD         [24] 1360 	jnb	_INT0,00132$
      000489 02r02r2B         [24] 1361 	ljmp	00139$
      00048C                       1362 00144$:
                                   1363 ;	./src/main.c:220: mode = 2;
      00048C 75*02 02         [24] 1364 	mov	_mode,#0x02
                                   1365 ;	./src/main.c:221: }
      00048F 22               [24] 1366 	ret
                                   1367 ;------------------------------------------------------------
                                   1368 ;Allocation info for local variables in function 'mode2'
                                   1369 ;------------------------------------------------------------
                                   1370 ;	./src/main.c:222: void mode2(void){
                                   1371 ;	-----------------------------------------
                                   1372 ;	 function mode2
                                   1373 ;	-----------------------------------------
      000490                       1374 _mode2:
                                   1375 ;	./src/main.c:223: OLED_Clear();
      000490 12r00r00         [24] 1376 	lcall	_OLED_Clear
                                   1377 ;	./src/main.c:224: OLED_SetCursor(2, 3);
      000493 75*00 03         [24] 1378 	mov	_OLED_SetCursor_PARM_2,#0x03
      000496 75 82 02         [24] 1379 	mov	dpl,#0x02
      000499 12r00r00         [24] 1380 	lcall	_OLED_SetCursor
                                   1381 ;	./src/main.c:225: OLED_DisplayString("Player2 setting ");
      00049C 90r00r8B         [24] 1382 	mov	dptr,#___str_10
      00049F 75 F0 80         [24] 1383 	mov	b,#0x80
      0004A2 12r00r00         [24] 1384 	lcall	_OLED_DisplayString
                                   1385 ;	./src/main.c:227: conti_flag = 0;
      0004A5 75*19 00         [24] 1386 	mov	_conti_flag,#0x00
                                   1387 ;	./src/main.c:229: nxt_row = 0; nxt_col = 0;
      0004A8 75*15 00         [24] 1388 	mov	_nxt_row,#0x00
      0004AB 75*16 00         [24] 1389 	mov	_nxt_col,#0x00
                                   1390 ;	./src/main.c:230: check_ = 0;
      0004AE 75*14 00         [24] 1391 	mov	_check_,#0x00
                                   1392 ;	./src/main.c:231: idx = 0;
      0004B1 75*13 00         [24] 1393 	mov	_idx,#0x00
                                   1394 ;	./src/main.c:232: while (idx < 2){
      0004B4                       1395 00142$:
      0004B4 74 FE            [12] 1396 	mov	a,#0x100 - 0x02
      0004B6 25*13            [12] 1397 	add	a,_idx
      0004B8 50 03            [24] 1398 	jnc	00304$
      0004BA 02r08r32         [24] 1399 	ljmp	00144$
      0004BD                       1400 00304$:
                                   1401 ;	./src/main.c:233: conti_flag = 0;
      0004BD 75*19 00         [24] 1402 	mov	_conti_flag,#0x00
                                   1403 ;	./src/main.c:234: for (tmp_l=0;tmp_l<idx;tmp_l++){ // default idx
      0004C0 75*12 00         [24] 1404 	mov	_tmp_l,#0x00
      0004C3                       1405 00149$:
      0004C3 C3               [12] 1406 	clr	c
      0004C4 E5*12            [12] 1407 	mov	a,_tmp_l
      0004C6 95*13            [12] 1408 	subb	a,_idx
      0004C8 40 03            [24] 1409 	jc	00305$
      0004CA 02r05r8C         [24] 1410 	ljmp	00112$
      0004CD                       1411 00305$:
                                   1412 ;	./src/main.c:235: for (tmp_i=1;tmp_i<=8;tmp_i++){
      0004CD 75*10 01         [24] 1413 	mov	_tmp_i,#0x01
      0004D0                       1414 00146$:
                                   1415 ;	./src/main.c:236: for (tmp_j=0;tmp_j<8;tmp_j++){
      0004D0 75*11 00         [24] 1416 	mov	_tmp_j,#0x00
      0004D3                       1417 00145$:
                                   1418 ;	./src/main.c:237: if (conti_flag != 0)break;;
      0004D3 E5*19            [12] 1419 	mov	a,_conti_flag
      0004D5 60 03            [24] 1420 	jz	00306$
      0004D7 02r05r7C         [24] 1421 	ljmp	00147$
      0004DA                       1422 00306$:
                                   1423 ;	./src/main.c:238: if (tmp_j+boat_type[idx][1]-1 > 7 ){continue;}
      0004DA AE*11            [24] 1424 	mov	r6,_tmp_j
      0004DC 7F 00            [12] 1425 	mov	r7,#0x00
      0004DE E5*13            [12] 1426 	mov	a,_idx
      0004E0 25*13            [12] 1427 	add	a,_idx
      0004E2 FD               [12] 1428 	mov	r5,a
      0004E3 24r09            [12] 1429 	add	a,#_boat_type
      0004E5 04               [12] 1430 	inc	a
      0004E6 F9               [12] 1431 	mov	r1,a
      0004E7 87 04            [24] 1432 	mov	ar4,@r1
      0004E9 7B 00            [12] 1433 	mov	r3,#0x00
      0004EB EC               [12] 1434 	mov	a,r4
      0004EC 2E               [12] 1435 	add	a,r6
      0004ED FE               [12] 1436 	mov	r6,a
      0004EE EB               [12] 1437 	mov	a,r3
      0004EF 3F               [12] 1438 	addc	a,r7
      0004F0 FF               [12] 1439 	mov	r7,a
      0004F1 1E               [12] 1440 	dec	r6
      0004F2 BE FF 01         [24] 1441 	cjne	r6,#0xff,00307$
      0004F5 1F               [12] 1442 	dec	r7
      0004F6                       1443 00307$:
      0004F6 C3               [12] 1444 	clr	c
      0004F7 74 07            [12] 1445 	mov	a,#0x07
      0004F9 9E               [12] 1446 	subb	a,r6
      0004FA 74 80            [12] 1447 	mov	a,#(0x00 ^ 0x80)
      0004FC 8F F0            [24] 1448 	mov	b,r7
      0004FE 63 F0 80         [24] 1449 	xrl	b,#0x80
      000501 95 F0            [12] 1450 	subb	a,b
      000503 40 6C            [24] 1451 	jc	00109$
                                   1452 ;	./src/main.c:239: if (tmp_i+boat_type[idx][0]-1 > 8){continue;}
      000505 AE*10            [24] 1453 	mov	r6,_tmp_i
      000507 7F 00            [12] 1454 	mov	r7,#0x00
      000509 ED               [12] 1455 	mov	a,r5
      00050A 24r09            [12] 1456 	add	a,#_boat_type
      00050C F9               [12] 1457 	mov	r1,a
      00050D 87 05            [24] 1458 	mov	ar5,@r1
      00050F 8D 03            [24] 1459 	mov	ar3,r5
      000511 7C 00            [12] 1460 	mov	r4,#0x00
      000513 EB               [12] 1461 	mov	a,r3
      000514 2E               [12] 1462 	add	a,r6
      000515 FE               [12] 1463 	mov	r6,a
      000516 EC               [12] 1464 	mov	a,r4
      000517 3F               [12] 1465 	addc	a,r7
      000518 FF               [12] 1466 	mov	r7,a
      000519 1E               [12] 1467 	dec	r6
      00051A BE FF 01         [24] 1468 	cjne	r6,#0xff,00309$
      00051D 1F               [12] 1469 	dec	r7
      00051E                       1470 00309$:
      00051E C3               [12] 1471 	clr	c
      00051F 74 08            [12] 1472 	mov	a,#0x08
      000521 9E               [12] 1473 	subb	a,r6
      000522 74 80            [12] 1474 	mov	a,#(0x00 ^ 0x80)
      000524 8F F0            [24] 1475 	mov	b,r7
      000526 63 F0 80         [24] 1476 	xrl	b,#0x80
      000529 95 F0            [12] 1477 	subb	a,b
      00052B 40 44            [24] 1478 	jc	00109$
                                   1479 ;	./src/main.c:241: if (overlap(tmp_i, tmp_j, boat_type[idx][0], boat_type[idx][1],
      00052D 09               [12] 1480 	inc	r1
      00052E 87*02            [24] 1481 	mov	_overlap_PARM_4,@r1
                                   1482 ;	./src/main.c:242: player2[tmp_l][0], player2[tmp_l][1], boat_type[tmp_l][0], boat_type[tmp_l][1]) != 1){
      000530 E5*12            [12] 1483 	mov	a,_tmp_l
      000532 25*12            [12] 1484 	add	a,_tmp_l
      000534 FF               [12] 1485 	mov	r7,a
      000535 24r20            [12] 1486 	add	a,#_player2
      000537 F9               [12] 1487 	mov	r1,a
      000538 87*03            [24] 1488 	mov	_overlap_PARM_5,@r1
      00053A 09               [12] 1489 	inc	r1
      00053B 87*04            [24] 1490 	mov	_overlap_PARM_6,@r1
      00053D EF               [12] 1491 	mov	a,r7
      00053E 24r09            [12] 1492 	add	a,#_boat_type
      000540 F9               [12] 1493 	mov	r1,a
      000541 87*05            [24] 1494 	mov	_overlap_PARM_7,@r1
      000543 09               [12] 1495 	inc	r1
      000544 87*06            [24] 1496 	mov	_overlap_PARM_8,@r1
      000546 85*11*00         [24] 1497 	mov	_overlap_PARM_2,_tmp_j
      000549 8D*01            [24] 1498 	mov	_overlap_PARM_3,r5
      00054B 85*10 82         [24] 1499 	mov	dpl,_tmp_i
      00054E 12r0Br75         [24] 1500 	lcall	_overlap
      000551 AF 82            [24] 1501 	mov	r7,dpl
      000553 BF 01 02         [24] 1502 	cjne	r7,#0x01,00311$
      000556 80 19            [24] 1503 	sjmp	00109$
      000558                       1504 00311$:
                                   1505 ;	./src/main.c:243: player2[idx][0] = tmp_i;
      000558 E5*13            [12] 1506 	mov	a,_idx
      00055A 25*13            [12] 1507 	add	a,_idx
      00055C 24r20            [12] 1508 	add	a,#_player2
      00055E F8               [12] 1509 	mov	r0,a
      00055F A6*10            [24] 1510 	mov	@r0,_tmp_i
                                   1511 ;	./src/main.c:244: player2[idx][1] = tmp_j;
      000561 E5*13            [12] 1512 	mov	a,_idx
      000563 25*13            [12] 1513 	add	a,_idx
      000565 24r20            [12] 1514 	add	a,#_player2
      000567 FF               [12] 1515 	mov	r7,a
      000568 04               [12] 1516 	inc	a
      000569 F8               [12] 1517 	mov	r0,a
      00056A A6*11            [24] 1518 	mov	@r0,_tmp_j
                                   1519 ;	./src/main.c:245: conti_flag = 1;
      00056C 75*19 01         [24] 1520 	mov	_conti_flag,#0x01
                                   1521 ;	./src/main.c:246: break;
      00056F 80 0B            [24] 1522 	sjmp	00147$
      000571                       1523 00109$:
                                   1524 ;	./src/main.c:236: for (tmp_j=0;tmp_j<8;tmp_j++){
      000571 05*11            [12] 1525 	inc	_tmp_j
      000573 74 F8            [12] 1526 	mov	a,#0x100 - 0x08
      000575 25*11            [12] 1527 	add	a,_tmp_j
      000577 40 03            [24] 1528 	jc	00312$
      000579 02r04rD3         [24] 1529 	ljmp	00145$
      00057C                       1530 00312$:
      00057C                       1531 00147$:
                                   1532 ;	./src/main.c:235: for (tmp_i=1;tmp_i<=8;tmp_i++){
      00057C 05*10            [12] 1533 	inc	_tmp_i
      00057E E5*10            [12] 1534 	mov	a,_tmp_i
      000580 24 F7            [12] 1535 	add	a,#0xff - 0x08
      000582 40 03            [24] 1536 	jc	00313$
      000584 02r04rD0         [24] 1537 	ljmp	00146$
      000587                       1538 00313$:
                                   1539 ;	./src/main.c:234: for (tmp_l=0;tmp_l<idx;tmp_l++){ // default idx
      000587 05*12            [12] 1540 	inc	_tmp_l
      000589 02r04rC3         [24] 1541 	ljmp	00149$
      00058C                       1542 00112$:
                                   1543 ;	./src/main.c:252: check_ = 1;
      00058C 75*14 01         [24] 1544 	mov	_check_,#0x01
                                   1545 ;	./src/main.c:253: OLED_SetCursor(3, 3);
      00058F 75*00 03         [24] 1546 	mov	_OLED_SetCursor_PARM_2,#0x03
      000592 75 82 03         [24] 1547 	mov	dpl,#0x03
      000595 12r00r00         [24] 1548 	lcall	_OLED_SetCursor
                                   1549 ;	./src/main.c:254: OLED_DisplayString("setting ");
      000598 90r00r6E         [24] 1550 	mov	dptr,#___str_7
      00059B 75 F0 80         [24] 1551 	mov	b,#0x80
      00059E 12r00r00         [24] 1552 	lcall	_OLED_DisplayString
                                   1553 ;	./src/main.c:255: OLED_DisplayChar('0' + idx);
      0005A1 AF*13            [24] 1554 	mov	r7,_idx
      0005A3 74 30            [12] 1555 	mov	a,#0x30
      0005A5 2F               [12] 1556 	add	a,r7
      0005A6 F5 82            [12] 1557 	mov	dpl,a
      0005A8 12r00r00         [24] 1558 	lcall	_OLED_DisplayChar
                                   1559 ;	./src/main.c:257: draw(player2[idx][0], player2[idx][1], player2[idx][0]+boat_type[idx][0]-1, player2[idx][1]+boat_type[idx][1]-1, 1);
      0005AB E5*13            [12] 1560 	mov	a,_idx
      0005AD 25*13            [12] 1561 	add	a,_idx
      0005AF FF               [12] 1562 	mov	r7,a
      0005B0 24r20            [12] 1563 	add	a,#_player2
      0005B2 F9               [12] 1564 	mov	r1,a
      0005B3 87 06            [24] 1565 	mov	ar6,@r1
      0005B5 09               [12] 1566 	inc	r1
      0005B6 87 05            [24] 1567 	mov	ar5,@r1
      0005B8 EF               [12] 1568 	mov	a,r7
      0005B9 24r09            [12] 1569 	add	a,#_boat_type
      0005BB F9               [12] 1570 	mov	r1,a
      0005BC E7               [12] 1571 	mov	a,@r1
      0005BD 2E               [12] 1572 	add	a,r6
      0005BE 14               [12] 1573 	dec	a
      0005BF F5*01            [12] 1574 	mov	_draw_PARM_3,a
      0005C1 09               [12] 1575 	inc	r1
      0005C2 E7               [12] 1576 	mov	a,@r1
      0005C3 2D               [12] 1577 	add	a,r5
      0005C4 14               [12] 1578 	dec	a
      0005C5 F5*02            [12] 1579 	mov	_draw_PARM_4,a
      0005C7 8D*00            [24] 1580 	mov	_draw_PARM_2,r5
      0005C9 75*03 01         [24] 1581 	mov	_draw_PARM_5,#0x01
      0005CC 8E 82            [24] 1582 	mov	dpl,r6
      0005CE 12r0Cr9D         [24] 1583 	lcall	_draw
                                   1584 ;	./src/main.c:258: while (check_){
      0005D1                       1585 00139$:
      0005D1 E5*14            [12] 1586 	mov	a,_check_
      0005D3 70 03            [24] 1587 	jnz	00314$
      0005D5 02r04rB4         [24] 1588 	ljmp	00142$
      0005D8                       1589 00314$:
                                   1590 ;	./src/main.c:259: OLED_SetCursor(4, 3);
      0005D8 75*00 03         [24] 1591 	mov	_OLED_SetCursor_PARM_2,#0x03
      0005DB 75 82 04         [24] 1592 	mov	dpl,#0x04
      0005DE 12r00r00         [24] 1593 	lcall	_OLED_SetCursor
                                   1594 ;	./src/main.c:260: OLED_DisplayString("set row: ");
      0005E1 90r00r77         [24] 1595 	mov	dptr,#___str_8
      0005E4 75 F0 80         [24] 1596 	mov	b,#0x80
      0005E7 12r00r00         [24] 1597 	lcall	_OLED_DisplayString
                                   1598 ;	./src/main.c:261: OLED_DisplayChar('0' + player2[idx][1]);
      0005EA E5*13            [12] 1599 	mov	a,_idx
      0005EC 25*13            [12] 1600 	add	a,_idx
      0005EE 24r20            [12] 1601 	add	a,#_player2
      0005F0 04               [12] 1602 	inc	a
      0005F1 F9               [12] 1603 	mov	r1,a
      0005F2 87 07            [24] 1604 	mov	ar7,@r1
      0005F4 74 30            [12] 1605 	mov	a,#0x30
      0005F6 2F               [12] 1606 	add	a,r7
      0005F7 F5 82            [12] 1607 	mov	dpl,a
      0005F9 12r00r00         [24] 1608 	lcall	_OLED_DisplayChar
                                   1609 ;	./src/main.c:262: OLED_SetCursor(5, 3);
      0005FC 75*00 03         [24] 1610 	mov	_OLED_SetCursor_PARM_2,#0x03
      0005FF 75 82 05         [24] 1611 	mov	dpl,#0x05
      000602 12r00r00         [24] 1612 	lcall	_OLED_SetCursor
                                   1613 ;	./src/main.c:263: OLED_DisplayString("set col: ");
      000605 90r00r81         [24] 1614 	mov	dptr,#___str_9
      000608 75 F0 80         [24] 1615 	mov	b,#0x80
      00060B 12r00r00         [24] 1616 	lcall	_OLED_DisplayString
                                   1617 ;	./src/main.c:264: OLED_DisplayChar('0' + player2[idx][0]);
      00060E E5*13            [12] 1618 	mov	a,_idx
      000610 25*13            [12] 1619 	add	a,_idx
      000612 24r20            [12] 1620 	add	a,#_player2
      000614 F9               [12] 1621 	mov	r1,a
      000615 87 07            [24] 1622 	mov	ar7,@r1
      000617 74 30            [12] 1623 	mov	a,#0x30
      000619 2F               [12] 1624 	add	a,r7
      00061A F5 82            [12] 1625 	mov	dpl,a
      00061C 12r00r00         [24] 1626 	lcall	_OLED_DisplayChar
                                   1627 ;	./src/main.c:267: now_key = Get_Key();
      00061F 12r00r00         [24] 1628 	lcall	_Get_Key
      000622 AE 82            [24] 1629 	mov	r6,dpl
      000624 AF 83            [24] 1630 	mov	r7,dph
                                   1631 ;	./src/main.c:268: if (now_key != 0){
      000626 EE               [12] 1632 	mov	a,r6
      000627 F5*08            [12] 1633 	mov	_now_key,a
      000629 70 03            [24] 1634 	jnz	00315$
      00062B 02r07rD3         [24] 1635 	ljmp	00129$
      00062E                       1636 00315$:
                                   1637 ;	./src/main.c:269: delay_ms(10);
      00062E 90 00 0A         [24] 1638 	mov	dptr,#0x000a
      000631 12r00r00         [24] 1639 	lcall	_delay_ms
                                   1640 ;	./src/main.c:270: if (Get_Key() == now_key){
      000634 12r00r00         [24] 1641 	lcall	_Get_Key
      000637 AE 82            [24] 1642 	mov	r6,dpl
      000639 AF 83            [24] 1643 	mov	r7,dph
      00063B AC*08            [24] 1644 	mov	r4,_now_key
      00063D 7D 00            [12] 1645 	mov	r5,#0x00
      00063F EE               [12] 1646 	mov	a,r6
      000640 B5 04 06         [24] 1647 	cjne	a,ar4,00316$
      000643 EF               [12] 1648 	mov	a,r7
      000644 B5 05 02         [24] 1649 	cjne	a,ar5,00316$
      000647 80 03            [24] 1650 	sjmp	00317$
      000649                       1651 00316$:
      000649 02r07rD3         [24] 1652 	ljmp	00129$
      00064C                       1653 00317$:
                                   1654 ;	./src/main.c:271: nxt_col = player2[idx][0];nxt_row = player2[idx][1];
      00064C E5*13            [12] 1655 	mov	a,_idx
      00064E 25*13            [12] 1656 	add	a,_idx
      000650 FF               [12] 1657 	mov	r7,a
      000651 24r20            [12] 1658 	add	a,#_player2
      000653 F9               [12] 1659 	mov	r1,a
      000654 87*16            [24] 1660 	mov	_nxt_col,@r1
      000656 09               [12] 1661 	inc	r1
      000657 87*15            [24] 1662 	mov	_nxt_row,@r1
                                   1663 ;	./src/main.c:272: if (now_key == 3){// up r
      000659 74 03            [12] 1664 	mov	a,#0x03
      00065B B5*08 1C         [24] 1665 	cjne	a,_now_key,00114$
                                   1666 ;	./src/main.c:273: nxt_row = (player2[idx][1] <= 0)? player2[idx][1]:player2[idx][1]-1;
      00065E EF               [12] 1667 	mov	a,r7
      00065F 24r20            [12] 1668 	add	a,#_player2
      000661 04               [12] 1669 	inc	a
      000662 F9               [12] 1670 	mov	r1,a
      000663 E7               [12] 1671 	mov	a,@r1
      000664 70 09            [24] 1672 	jnz	00160$
      000666 EF               [12] 1673 	mov	a,r7
      000667 24r20            [12] 1674 	add	a,#_player2
      000669 04               [12] 1675 	inc	a
      00066A F9               [12] 1676 	mov	r1,a
      00066B 87 06            [24] 1677 	mov	ar6,@r1
      00066D 80 09            [24] 1678 	sjmp	00161$
      00066F                       1679 00160$:
      00066F EF               [12] 1680 	mov	a,r7
      000670 24r20            [12] 1681 	add	a,#_player2
      000672 04               [12] 1682 	inc	a
      000673 F9               [12] 1683 	mov	r1,a
      000674 E7               [12] 1684 	mov	a,@r1
      000675 FF               [12] 1685 	mov	r7,a
      000676 14               [12] 1686 	dec	a
      000677 FE               [12] 1687 	mov	r6,a
      000678                       1688 00161$:
      000678 8E*15            [24] 1689 	mov	_nxt_row,r6
      00067A                       1690 00114$:
                                   1691 ;	./src/main.c:274: }if (now_key == 4){ // down r
      00067A 74 04            [12] 1692 	mov	a,#0x04
      00067C B5*08 42         [24] 1693 	cjne	a,_now_key,00116$
                                   1694 ;	./src/main.c:275: nxt_row = (player2[idx][1]+boat_type[idx][1]-1 >= 7)? player2[idx][1]:player2[idx][1]+1;
      00067F E5*13            [12] 1695 	mov	a,_idx
      000681 25*13            [12] 1696 	add	a,_idx
      000683 FF               [12] 1697 	mov	r7,a
      000684 24r20            [12] 1698 	add	a,#_player2
      000686 04               [12] 1699 	inc	a
      000687 F9               [12] 1700 	mov	r1,a
      000688 87 06            [24] 1701 	mov	ar6,@r1
      00068A 7D 00            [12] 1702 	mov	r5,#0x00
      00068C EF               [12] 1703 	mov	a,r7
      00068D 24r09            [12] 1704 	add	a,#_boat_type
      00068F 04               [12] 1705 	inc	a
      000690 F9               [12] 1706 	mov	r1,a
      000691 87 04            [24] 1707 	mov	ar4,@r1
      000693 7B 00            [12] 1708 	mov	r3,#0x00
      000695 EC               [12] 1709 	mov	a,r4
      000696 2E               [12] 1710 	add	a,r6
      000697 FE               [12] 1711 	mov	r6,a
      000698 EB               [12] 1712 	mov	a,r3
      000699 3D               [12] 1713 	addc	a,r5
      00069A FD               [12] 1714 	mov	r5,a
      00069B 1E               [12] 1715 	dec	r6
      00069C BE FF 01         [24] 1716 	cjne	r6,#0xff,00323$
      00069F 1D               [12] 1717 	dec	r5
      0006A0                       1718 00323$:
      0006A0 C3               [12] 1719 	clr	c
      0006A1 EE               [12] 1720 	mov	a,r6
      0006A2 94 07            [12] 1721 	subb	a,#0x07
      0006A4 ED               [12] 1722 	mov	a,r5
      0006A5 64 80            [12] 1723 	xrl	a,#0x80
      0006A7 94 80            [12] 1724 	subb	a,#0x80
      0006A9 92*01            [24] 1725 	mov	_mode2_sloc0_1_0,c
      0006AB 40 09            [24] 1726 	jc	00162$
      0006AD EF               [12] 1727 	mov	a,r7
      0006AE 24r20            [12] 1728 	add	a,#_player2
      0006B0 04               [12] 1729 	inc	a
      0006B1 F9               [12] 1730 	mov	r1,a
      0006B2 87 06            [24] 1731 	mov	ar6,@r1
      0006B4 80 09            [24] 1732 	sjmp	00163$
      0006B6                       1733 00162$:
      0006B6 EF               [12] 1734 	mov	a,r7
      0006B7 24r20            [12] 1735 	add	a,#_player2
      0006B9 04               [12] 1736 	inc	a
      0006BA F9               [12] 1737 	mov	r1,a
      0006BB E7               [12] 1738 	mov	a,@r1
      0006BC FF               [12] 1739 	mov	r7,a
      0006BD 04               [12] 1740 	inc	a
      0006BE FE               [12] 1741 	mov	r6,a
      0006BF                       1742 00163$:
      0006BF 8E*15            [24] 1743 	mov	_nxt_row,r6
      0006C1                       1744 00116$:
                                   1745 ;	./src/main.c:277: if (now_key == 7){// left r
      0006C1 74 07            [12] 1746 	mov	a,#0x07
      0006C3 B5*08 18         [24] 1747 	cjne	a,_now_key,00118$
                                   1748 ;	./src/main.c:278: nxt_col = (player2[idx][0] <= 1)? player2[idx][0]:player2[idx][0]-1;
      0006C6 E5*13            [12] 1749 	mov	a,_idx
      0006C8 25*13            [12] 1750 	add	a,_idx
      0006CA 24r20            [12] 1751 	add	a,#_player2
      0006CC F9               [12] 1752 	mov	r1,a
      0006CD E7               [12] 1753 	mov	a,@r1
      0006CE FF               [12] 1754 	mov	r7,a
      0006CF 24 FE            [12] 1755 	add	a,#0xff - 0x01
      0006D1 92*01            [24] 1756 	mov	_mode2_sloc0_1_0,c
      0006D3 40 04            [24] 1757 	jc	00164$
      0006D5 8F 06            [24] 1758 	mov	ar6,r7
      0006D7 80 03            [24] 1759 	sjmp	00165$
      0006D9                       1760 00164$:
      0006D9 EF               [12] 1761 	mov	a,r7
      0006DA 14               [12] 1762 	dec	a
      0006DB FE               [12] 1763 	mov	r6,a
      0006DC                       1764 00165$:
      0006DC 8E*16            [24] 1765 	mov	_nxt_col,r6
      0006DE                       1766 00118$:
                                   1767 ;	./src/main.c:280: if (now_key == 8){// right r
      0006DE 74 08            [12] 1768 	mov	a,#0x08
      0006E0 B5*08 37         [24] 1769 	cjne	a,_now_key,00120$
                                   1770 ;	./src/main.c:281: nxt_col = (player2[idx][0]+boat_type[idx][0]-1 >= 8)? player2[idx][0]:player2[idx][0]+1;
      0006E3 E5*13            [12] 1771 	mov	a,_idx
      0006E5 25*13            [12] 1772 	add	a,_idx
      0006E7 FF               [12] 1773 	mov	r7,a
      0006E8 24r20            [12] 1774 	add	a,#_player2
      0006EA F9               [12] 1775 	mov	r1,a
      0006EB 87 06            [24] 1776 	mov	ar6,@r1
      0006ED 8E 04            [24] 1777 	mov	ar4,r6
      0006EF 7D 00            [12] 1778 	mov	r5,#0x00
      0006F1 EF               [12] 1779 	mov	a,r7
      0006F2 24r09            [12] 1780 	add	a,#_boat_type
      0006F4 F9               [12] 1781 	mov	r1,a
      0006F5 87 07            [24] 1782 	mov	ar7,@r1
      0006F7 7B 00            [12] 1783 	mov	r3,#0x00
      0006F9 EF               [12] 1784 	mov	a,r7
      0006FA 2C               [12] 1785 	add	a,r4
      0006FB FC               [12] 1786 	mov	r4,a
      0006FC EB               [12] 1787 	mov	a,r3
      0006FD 3D               [12] 1788 	addc	a,r5
      0006FE FD               [12] 1789 	mov	r5,a
      0006FF 1C               [12] 1790 	dec	r4
      000700 BC FF 01         [24] 1791 	cjne	r4,#0xff,00330$
      000703 1D               [12] 1792 	dec	r5
      000704                       1793 00330$:
      000704 C3               [12] 1794 	clr	c
      000705 EC               [12] 1795 	mov	a,r4
      000706 94 08            [12] 1796 	subb	a,#0x08
      000708 ED               [12] 1797 	mov	a,r5
      000709 64 80            [12] 1798 	xrl	a,#0x80
      00070B 94 80            [12] 1799 	subb	a,#0x80
      00070D 92*01            [24] 1800 	mov	_mode2_sloc0_1_0,c
      00070F 40 04            [24] 1801 	jc	00166$
      000711 8E 07            [24] 1802 	mov	ar7,r6
      000713 80 03            [24] 1803 	sjmp	00167$
      000715                       1804 00166$:
      000715 EE               [12] 1805 	mov	a,r6
      000716 04               [12] 1806 	inc	a
      000717 FF               [12] 1807 	mov	r7,a
      000718                       1808 00167$:
      000718 8F*16            [24] 1809 	mov	_nxt_col,r7
      00071A                       1810 00120$:
                                   1811 ;	./src/main.c:284: for (l=0;l<idx;l++){
      00071A 75*0F 00         [24] 1812 	mov	_l,#0x00
      00071D                       1813 00152$:
      00071D C3               [12] 1814 	clr	c
      00071E E5*0F            [12] 1815 	mov	a,_l
      000720 95*13            [12] 1816 	subb	a,_idx
      000722 50 3C            [24] 1817 	jnc	00123$
                                   1818 ;	./src/main.c:285: conti_flag = 0;
      000724 75*19 00         [24] 1819 	mov	_conti_flag,#0x00
                                   1820 ;	./src/main.c:286: if (overlap(nxt_col, nxt_row, boat_type[idx][0], boat_type[idx][1],
      000727 E5*13            [12] 1821 	mov	a,_idx
      000729 25*13            [12] 1822 	add	a,_idx
      00072B 24r09            [12] 1823 	add	a,#_boat_type
      00072D F9               [12] 1824 	mov	r1,a
      00072E 87*01            [24] 1825 	mov	_overlap_PARM_3,@r1
      000730 09               [12] 1826 	inc	r1
      000731 87*02            [24] 1827 	mov	_overlap_PARM_4,@r1
                                   1828 ;	./src/main.c:287: player2[l][0], player2[l][1], boat_type[l][0], boat_type[l][1]) == 1){
      000733 E5*0F            [12] 1829 	mov	a,_l
      000735 25*0F            [12] 1830 	add	a,_l
      000737 FF               [12] 1831 	mov	r7,a
      000738 24r20            [12] 1832 	add	a,#_player2
      00073A F9               [12] 1833 	mov	r1,a
      00073B 87*03            [24] 1834 	mov	_overlap_PARM_5,@r1
      00073D 09               [12] 1835 	inc	r1
      00073E 87*04            [24] 1836 	mov	_overlap_PARM_6,@r1
      000740 EF               [12] 1837 	mov	a,r7
      000741 24r09            [12] 1838 	add	a,#_boat_type
      000743 F9               [12] 1839 	mov	r1,a
      000744 87*05            [24] 1840 	mov	_overlap_PARM_7,@r1
      000746 09               [12] 1841 	inc	r1
      000747 87*06            [24] 1842 	mov	_overlap_PARM_8,@r1
      000749 85*15*00         [24] 1843 	mov	_overlap_PARM_2,_nxt_row
      00074C 85*16 82         [24] 1844 	mov	dpl,_nxt_col
      00074F 12r0Br75         [24] 1845 	lcall	_overlap
      000752 AF 82            [24] 1846 	mov	r7,dpl
      000754 BF 01 05         [24] 1847 	cjne	r7,#0x01,00153$
                                   1848 ;	./src/main.c:288: conti_flag = 1;
      000757 75*19 01         [24] 1849 	mov	_conti_flag,#0x01
                                   1850 ;	./src/main.c:289: break;;
      00075A 80 04            [24] 1851 	sjmp	00123$
      00075C                       1852 00153$:
                                   1853 ;	./src/main.c:284: for (l=0;l<idx;l++){
      00075C 05*0F            [12] 1854 	inc	_l
      00075E 80 BD            [24] 1855 	sjmp	00152$
      000760                       1856 00123$:
                                   1857 ;	./src/main.c:292: if (conti_flag == 1){
      000760 74 01            [12] 1858 	mov	a,#0x01
      000762 B5*19 06         [24] 1859 	cjne	a,_conti_flag,00125$
                                   1860 ;	./src/main.c:293: conti_flag = 0;
      000765 75*19 00         [24] 1861 	mov	_conti_flag,#0x00
                                   1862 ;	./src/main.c:294: continue;
      000768 02r05rD1         [24] 1863 	ljmp	00139$
      00076B                       1864 00125$:
                                   1865 ;	./src/main.c:301: del(player2[idx][0], player2[idx][1], player2[idx][0]+boat_type[idx][0]-1, player2[idx][1]+boat_type[idx][1]-1, 1);
      00076B E5*13            [12] 1866 	mov	a,_idx
      00076D 25*13            [12] 1867 	add	a,_idx
      00076F FF               [12] 1868 	mov	r7,a
      000770 24r20            [12] 1869 	add	a,#_player2
      000772 F9               [12] 1870 	mov	r1,a
      000773 87 06            [24] 1871 	mov	ar6,@r1
      000775 09               [12] 1872 	inc	r1
      000776 87 05            [24] 1873 	mov	ar5,@r1
      000778 EF               [12] 1874 	mov	a,r7
      000779 24r09            [12] 1875 	add	a,#_boat_type
      00077B F9               [12] 1876 	mov	r1,a
      00077C E7               [12] 1877 	mov	a,@r1
      00077D 2E               [12] 1878 	add	a,r6
      00077E 14               [12] 1879 	dec	a
      00077F F5*01            [12] 1880 	mov	_del_PARM_3,a
      000781 09               [12] 1881 	inc	r1
      000782 E7               [12] 1882 	mov	a,@r1
      000783 2D               [12] 1883 	add	a,r5
      000784 14               [12] 1884 	dec	a
      000785 F5*02            [12] 1885 	mov	_del_PARM_4,a
      000787 8D*00            [24] 1886 	mov	_del_PARM_2,r5
      000789 75*03 01         [24] 1887 	mov	_del_PARM_5,#0x01
      00078C 8E 82            [24] 1888 	mov	dpl,r6
      00078E 12r0Cr1F         [24] 1889 	lcall	_del
                                   1890 ;	./src/main.c:302: player2[idx][1] = nxt_row;
      000791 E5*13            [12] 1891 	mov	a,_idx
      000793 25*13            [12] 1892 	add	a,_idx
      000795 24r20            [12] 1893 	add	a,#_player2
      000797 04               [12] 1894 	inc	a
      000798 F8               [12] 1895 	mov	r0,a
      000799 A6*15            [24] 1896 	mov	@r0,_nxt_row
                                   1897 ;	./src/main.c:303: player2[idx][0] = nxt_col;
      00079B E5*13            [12] 1898 	mov	a,_idx
      00079D 25*13            [12] 1899 	add	a,_idx
      00079F 24r20            [12] 1900 	add	a,#_player2
      0007A1 F8               [12] 1901 	mov	r0,a
      0007A2 A6*16            [24] 1902 	mov	@r0,_nxt_col
                                   1903 ;	./src/main.c:304: draw(player2[idx][0], player2[idx][1], player2[idx][0]+boat_type[idx][0]-1, player2[idx][1]+boat_type[idx][1]-1, 1);
      0007A4 E5*13            [12] 1904 	mov	a,_idx
      0007A6 25*13            [12] 1905 	add	a,_idx
      0007A8 FF               [12] 1906 	mov	r7,a
      0007A9 24r20            [12] 1907 	add	a,#_player2
      0007AB F9               [12] 1908 	mov	r1,a
      0007AC 87 06            [24] 1909 	mov	ar6,@r1
      0007AE 09               [12] 1910 	inc	r1
      0007AF 87 05            [24] 1911 	mov	ar5,@r1
      0007B1 EF               [12] 1912 	mov	a,r7
      0007B2 24r09            [12] 1913 	add	a,#_boat_type
      0007B4 F9               [12] 1914 	mov	r1,a
      0007B5 E7               [12] 1915 	mov	a,@r1
      0007B6 2E               [12] 1916 	add	a,r6
      0007B7 14               [12] 1917 	dec	a
      0007B8 F5*01            [12] 1918 	mov	_draw_PARM_3,a
      0007BA 09               [12] 1919 	inc	r1
      0007BB E7               [12] 1920 	mov	a,@r1
      0007BC 2D               [12] 1921 	add	a,r5
      0007BD 14               [12] 1922 	dec	a
      0007BE F5*02            [12] 1923 	mov	_draw_PARM_4,a
      0007C0 8D*00            [24] 1924 	mov	_draw_PARM_2,r5
      0007C2 75*03 01         [24] 1925 	mov	_draw_PARM_5,#0x01
      0007C5 8E 82            [24] 1926 	mov	dpl,r6
      0007C7 12r0Cr9D         [24] 1927 	lcall	_draw
                                   1928 ;	./src/main.c:305: now_key = 0;
      0007CA 75*08 00         [24] 1929 	mov	_now_key,#0x00
                                   1930 ;	./src/main.c:306: delay_ms(100);
      0007CD 90 00 64         [24] 1931 	mov	dptr,#0x0064
      0007D0 12r00r00         [24] 1932 	lcall	_delay_ms
      0007D3                       1933 00129$:
                                   1934 ;	./src/main.c:310: for (i=1;i<=8;i++){
      0007D3 75*0D 01         [24] 1935 	mov	_i,#0x01
      0007D6                       1936 00154$:
                                   1937 ;	./src/main.c:311: Writesingle7219(4, i, mat2_2[i]);
      0007D6 E5*0D            [12] 1938 	mov	a,_i
      0007D8 24r48            [12] 1939 	add	a,#_mat2_2
      0007DA F9               [12] 1940 	mov	r1,a
      0007DB 87*00            [24] 1941 	mov	_Writesingle7219_PARM_3,@r1
      0007DD 85*0D*00         [24] 1942 	mov	_Writesingle7219_PARM_2,_i
      0007E0 75 82 04         [24] 1943 	mov	dpl,#0x04
      0007E3 12r00r00         [24] 1944 	lcall	_Writesingle7219
                                   1945 ;	./src/main.c:310: for (i=1;i<=8;i++){
      0007E6 05*0D            [12] 1946 	inc	_i
      0007E8 E5*0D            [12] 1947 	mov	a,_i
      0007EA 24 F7            [12] 1948 	add	a,#0xff - 0x08
      0007EC 50 E8            [24] 1949 	jnc	00154$
                                   1950 ;	./src/main.c:313: if (but4 == 0){
      0007EE 30 A1 03         [24] 1951 	jnb	_P2_1,00338$
      0007F1 02r05rD1         [24] 1952 	ljmp	00139$
      0007F4                       1953 00338$:
                                   1954 ;	./src/main.c:314: delay_ms(10);
      0007F4 90 00 0A         [24] 1955 	mov	dptr,#0x000a
      0007F7 12r00r00         [24] 1956 	lcall	_delay_ms
                                   1957 ;	./src/main.c:315: if (but4 == 0){
      0007FA 30 A1 03         [24] 1958 	jnb	_P2_1,00339$
      0007FD 02r05rD1         [24] 1959 	ljmp	00139$
      000800                       1960 00339$:
                                   1961 ;	./src/main.c:316: idx+=1;
      000800 E5*13            [12] 1962 	mov	a,_idx
      000802 FF               [12] 1963 	mov	r7,a
      000803 04               [12] 1964 	inc	a
      000804 F5*13            [12] 1965 	mov	_idx,a
                                   1966 ;	./src/main.c:317: check_ = 0;
                                   1967 ;	./src/main.c:318: for(in_i = 0;in_i < 588;in_i++){
      000806 E4               [12] 1968 	clr	a
      000807 F5*14            [12] 1969 	mov	_check_,a
      000809 F5*00            [12] 1970 	mov	_in_i,a
      00080B F5*01            [12] 1971 	mov	(_in_i + 1),a
      00080D                       1972 00156$:
                                   1973 ;	./src/main.c:319: P3_7 = 1;
                                   1974 ;	assignBit
      00080D D2 B7            [12] 1975 	setb	_P3_7
                                   1976 ;	./src/main.c:320: Delay_Re();
      00080F 12r00r00         [24] 1977 	lcall	_Delay_Re
                                   1978 ;	./src/main.c:321: P3_7 = 0;
                                   1979 ;	assignBit
      000812 C2 B7            [12] 1980 	clr	_P3_7
                                   1981 ;	./src/main.c:322: Delay_Re();
      000814 12r00r00         [24] 1982 	lcall	_Delay_Re
                                   1983 ;	./src/main.c:318: for(in_i = 0;in_i < 588;in_i++){
      000817 05*00            [12] 1984 	inc	_in_i
      000819 E4               [12] 1985 	clr	a
      00081A B5*00 02         [24] 1986 	cjne	a,_in_i,00340$
      00081D 05*01            [12] 1987 	inc	(_in_i + 1)
      00081F                       1988 00340$:
      00081F C3               [12] 1989 	clr	c
      000820 E5*00            [12] 1990 	mov	a,_in_i
      000822 94 4C            [12] 1991 	subb	a,#0x4c
      000824 E5*01            [12] 1992 	mov	a,(_in_i + 1)
      000826 64 80            [12] 1993 	xrl	a,#0x80
      000828 94 82            [12] 1994 	subb	a,#0x82
      00082A 40 E1            [24] 1995 	jc	00156$
                                   1996 ;	./src/main.c:324: while (but4 == 0);
      00082C                       1997 00132$:
      00082C 30 A1 FD         [24] 1998 	jnb	_P2_1,00132$
      00082F 02r05rD1         [24] 1999 	ljmp	00139$
      000832                       2000 00144$:
                                   2001 ;	./src/main.c:330: mode = 3;
      000832 75*02 03         [24] 2002 	mov	_mode,#0x03
                                   2003 ;	./src/main.c:331: }
      000835 22               [24] 2004 	ret
                                   2005 ;------------------------------------------------------------
                                   2006 ;Allocation info for local variables in function 'mode3'
                                   2007 ;------------------------------------------------------------
                                   2008 ;	./src/main.c:333: void mode3(void){
                                   2009 ;	-----------------------------------------
                                   2010 ;	 function mode3
                                   2011 ;	-----------------------------------------
      000836                       2012 _mode3:
                                   2013 ;	./src/main.c:334: turn = 1;
      000836 75*1B 01         [24] 2014 	mov	_turn,#0x01
                                   2015 ;	./src/main.c:335: OLED_Clear();
      000839 12r00r00         [24] 2016 	lcall	_OLED_Clear
                                   2017 ;	./src/main.c:336: OLED_SetCursor(2, 3);
      00083C 75*00 03         [24] 2018 	mov	_OLED_SetCursor_PARM_2,#0x03
      00083F 75 82 02         [24] 2019 	mov	dpl,#0x02
      000842 12r00r00         [24] 2020 	lcall	_OLED_SetCursor
                                   2021 ;	./src/main.c:337: OLED_DisplayString("Player ");
      000845 90r00r9C         [24] 2022 	mov	dptr,#___str_11
      000848 75 F0 80         [24] 2023 	mov	b,#0x80
      00084B 12r00r00         [24] 2024 	lcall	_OLED_DisplayString
                                   2025 ;	./src/main.c:338: OLED_DisplayChar('0'+turn);
      00084E AF*1B            [24] 2026 	mov	r7,_turn
      000850 74 30            [12] 2027 	mov	a,#0x30
      000852 2F               [12] 2028 	add	a,r7
      000853 F5 82            [12] 2029 	mov	dpl,a
      000855 12r00r00         [24] 2030 	lcall	_OLED_DisplayChar
                                   2031 ;	./src/main.c:339: OLED_DisplayString(" turn ");
      000858 90r00rA4         [24] 2032 	mov	dptr,#___str_12
      00085B 75 F0 80         [24] 2033 	mov	b,#0x80
      00085E 12r00r00         [24] 2034 	lcall	_OLED_DisplayString
                                   2035 ;	./src/main.c:340: OLED_SetCursor(3, 4);
      000861 75*00 04         [24] 2036 	mov	_OLED_SetCursor_PARM_2,#0x04
      000864 75 82 03         [24] 2037 	mov	dpl,#0x03
      000867 12r00r00         [24] 2038 	lcall	_OLED_SetCursor
                                   2039 ;	./src/main.c:341: OLED_DisplayString("now row: ");
      00086A 90r00rAB         [24] 2040 	mov	dptr,#___str_13
      00086D 75 F0 80         [24] 2041 	mov	b,#0x80
      000870 12r00r00         [24] 2042 	lcall	_OLED_DisplayString
                                   2043 ;	./src/main.c:342: OLED_SetCursor(4, 4);
      000873 75*00 04         [24] 2044 	mov	_OLED_SetCursor_PARM_2,#0x04
      000876 75 82 04         [24] 2045 	mov	dpl,#0x04
      000879 12r00r00         [24] 2046 	lcall	_OLED_SetCursor
                                   2047 ;	./src/main.c:343: OLED_DisplayString("now col: ");
      00087C 90r00rB5         [24] 2048 	mov	dptr,#___str_14
      00087F 75 F0 80         [24] 2049 	mov	b,#0x80
      000882 12r00r00         [24] 2050 	lcall	_OLED_DisplayString
                                   2051 ;	./src/main.c:344: OLED_SetCursor(5, 4);
      000885 75*00 04         [24] 2052 	mov	_OLED_SetCursor_PARM_2,#0x04
      000888 75 82 05         [24] 2053 	mov	dpl,#0x05
      00088B 12r00r00         [24] 2054 	lcall	_OLED_SetCursor
                                   2055 ;	./src/main.c:345: OLED_DisplayString("now score: "); // OLED要顯示的資訊
      00088E 90r00rBF         [24] 2056 	mov	dptr,#___str_15
      000891 75 F0 80         [24] 2057 	mov	b,#0x80
      000894 12r00r00         [24] 2058 	lcall	_OLED_DisplayString
                                   2059 ;	./src/main.c:348: while (winner == 0){ // 若還沒產生贏家
      000897                       2060 00142$:
      000897 E5*03            [12] 2061 	mov	a,_winner
      000899 60 03            [24] 2062 	jz	00295$
      00089B 02r0Br6D         [24] 2063 	ljmp	00144$
      00089E                       2064 00295$:
                                   2065 ;	./src/main.c:351: now_col = player[turn][0];
      00089E E5*1B            [12] 2066 	mov	a,_turn
      0008A0 25*1B            [12] 2067 	add	a,_turn
      0008A2 24r24            [12] 2068 	add	a,#_player
      0008A4 F9               [12] 2069 	mov	r1,a
      0008A5 87*18            [24] 2070 	mov	_now_col,@r1
                                   2071 ;	./src/main.c:352: now_row = player[turn][1];
      0008A7 09               [12] 2072 	inc	r1
      0008A8 87*17            [24] 2073 	mov	_now_row,@r1
                                   2074 ;	./src/main.c:353: OLED_SetCursor(3, 55);
      0008AA 75*00 37         [24] 2075 	mov	_OLED_SetCursor_PARM_2,#0x37
      0008AD 75 82 03         [24] 2076 	mov	dpl,#0x03
      0008B0 12r00r00         [24] 2077 	lcall	_OLED_SetCursor
                                   2078 ;	./src/main.c:354: OLED_DisplayChar('0'+now_row);
      0008B3 AF*17            [24] 2079 	mov	r7,_now_row
      0008B5 74 30            [12] 2080 	mov	a,#0x30
      0008B7 2F               [12] 2081 	add	a,r7
      0008B8 F5 82            [12] 2082 	mov	dpl,a
      0008BA 12r00r00         [24] 2083 	lcall	_OLED_DisplayChar
                                   2084 ;	./src/main.c:355: OLED_SetCursor(4, 55);
      0008BD 75*00 37         [24] 2085 	mov	_OLED_SetCursor_PARM_2,#0x37
      0008C0 75 82 04         [24] 2086 	mov	dpl,#0x04
      0008C3 12r00r00         [24] 2087 	lcall	_OLED_SetCursor
                                   2088 ;	./src/main.c:356: OLED_DisplayChar('0'+now_col);
      0008C6 AF*18            [24] 2089 	mov	r7,_now_col
      0008C8 74 30            [12] 2090 	mov	a,#0x30
      0008CA 2F               [12] 2091 	add	a,r7
      0008CB F5 82            [12] 2092 	mov	dpl,a
      0008CD 12r00r00         [24] 2093 	lcall	_OLED_DisplayChar
                                   2094 ;	./src/main.c:357: OLED_SetCursor(5, 70);
      0008D0 75*00 46         [24] 2095 	mov	_OLED_SetCursor_PARM_2,#0x46
      0008D3 75 82 05         [24] 2096 	mov	dpl,#0x05
      0008D6 12r00r00         [24] 2097 	lcall	_OLED_SetCursor
                                   2098 ;	./src/main.c:358: OLED_DisplayChar(player_score[turn]/10+'0');
      0008D9 E5*1B            [12] 2099 	mov	a,_turn
      0008DB 24r2A            [12] 2100 	add	a,#_player_score
      0008DD F9               [12] 2101 	mov	r1,a
      0008DE 87 07            [24] 2102 	mov	ar7,@r1
      0008E0 7E 00            [12] 2103 	mov	r6,#0x00
      0008E2 75*00 0A         [24] 2104 	mov	__divsint_PARM_2,#0x0a
                                   2105 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0008E5 8E*01            [24] 2106 	mov	(__divsint_PARM_2 + 1),r6
      0008E7 8F 82            [24] 2107 	mov	dpl,r7
      0008E9 8E 83            [24] 2108 	mov	dph,r6
      0008EB 12r00r00         [24] 2109 	lcall	__divsint
      0008EE AE 82            [24] 2110 	mov	r6,dpl
      0008F0 74 30            [12] 2111 	mov	a,#0x30
      0008F2 2E               [12] 2112 	add	a,r6
      0008F3 F5 82            [12] 2113 	mov	dpl,a
      0008F5 12r00r00         [24] 2114 	lcall	_OLED_DisplayChar
                                   2115 ;	./src/main.c:359: OLED_DisplayChar(player_score[turn]%10 + '0'); // 顯示當前資訊
      0008F8 E5*1B            [12] 2116 	mov	a,_turn
      0008FA 24r2A            [12] 2117 	add	a,#_player_score
      0008FC F9               [12] 2118 	mov	r1,a
      0008FD 87 07            [24] 2119 	mov	ar7,@r1
      0008FF 7E 00            [12] 2120 	mov	r6,#0x00
      000901 75*00 0A         [24] 2121 	mov	__modsint_PARM_2,#0x0a
                                   2122 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000904 8E*01            [24] 2123 	mov	(__modsint_PARM_2 + 1),r6
      000906 8F 82            [24] 2124 	mov	dpl,r7
      000908 8E 83            [24] 2125 	mov	dph,r6
      00090A 12r00r00         [24] 2126 	lcall	__modsint
      00090D AE 82            [24] 2127 	mov	r6,dpl
      00090F 74 30            [12] 2128 	mov	a,#0x30
      000911 2E               [12] 2129 	add	a,r6
      000912 F5 82            [12] 2130 	mov	dpl,a
      000914 12r00r00         [24] 2131 	lcall	_OLED_DisplayChar
                                   2132 ;	./src/main.c:360: now_key = Get_Key();
      000917 12r00r00         [24] 2133 	lcall	_Get_Key
      00091A AE 82            [24] 2134 	mov	r6,dpl
      00091C AF 83            [24] 2135 	mov	r7,dph
                                   2136 ;	./src/main.c:361: if (now_key != 0){
      00091E EE               [12] 2137 	mov	a,r6
      00091F F5*08            [12] 2138 	mov	_now_key,a
      000921 70 03            [24] 2139 	jnz	00296$
      000923 02r09rD2         [24] 2140 	ljmp	00115$
      000926                       2141 00296$:
                                   2142 ;	./src/main.c:362: delay_ms(10);
      000926 90 00 0A         [24] 2143 	mov	dptr,#0x000a
      000929 12r00r00         [24] 2144 	lcall	_delay_ms
                                   2145 ;	./src/main.c:363: if (now_key == Get_Key()){ //  移動鼠標
      00092C 12r00r00         [24] 2146 	lcall	_Get_Key
      00092F AE 82            [24] 2147 	mov	r6,dpl
      000931 AF 83            [24] 2148 	mov	r7,dph
      000933 AC*08            [24] 2149 	mov	r4,_now_key
      000935 7D 00            [12] 2150 	mov	r5,#0x00
      000937 EC               [12] 2151 	mov	a,r4
      000938 B5 06 06         [24] 2152 	cjne	a,ar6,00297$
      00093B ED               [12] 2153 	mov	a,r5
      00093C B5 07 02         [24] 2154 	cjne	a,ar7,00297$
      00093F 80 03            [24] 2155 	sjmp	00298$
      000941                       2156 00297$:
      000941 02r09rD2         [24] 2157 	ljmp	00115$
      000944                       2158 00298$:
                                   2159 ;	./src/main.c:364: nxt_col = now_col;nxt_row = now_row;
      000944 85*18*16         [24] 2160 	mov	_nxt_col,_now_col
      000947 85*17*15         [24] 2161 	mov	_nxt_row,_now_row
                                   2162 ;	./src/main.c:365: if (now_key == 1){
      00094A 74 01            [12] 2163 	mov	a,#0x01
      00094C B5*08 15         [24] 2164 	cjne	a,_now_key,00110$
                                   2165 ;	./src/main.c:366: nxt_row = (now_row <= 0)? 0:now_row-1;
      00094F E5*17            [12] 2166 	mov	a,_now_row
      000951 70 04            [24] 2167 	jnz	00159$
      000953 FE               [12] 2168 	mov	r6,a
      000954 FF               [12] 2169 	mov	r7,a
      000955 80 09            [24] 2170 	sjmp	00160$
      000957                       2171 00159$:
      000957 AD*17            [24] 2172 	mov	r5,_now_row
      000959 1D               [12] 2173 	dec	r5
      00095A ED               [12] 2174 	mov	a,r5
      00095B FE               [12] 2175 	mov	r6,a
      00095C 33               [12] 2176 	rlc	a
      00095D 95 E0            [12] 2177 	subb	a,acc
      00095F FF               [12] 2178 	mov	r7,a
      000960                       2179 00160$:
      000960 8E*15            [24] 2180 	mov	_nxt_row,r6
      000962 80 54            [24] 2181 	sjmp	00111$
      000964                       2182 00110$:
                                   2183 ;	./src/main.c:367: }else if (now_key == 2){
      000964 74 02            [12] 2184 	mov	a,#0x02
      000966 B5*08 16         [24] 2185 	cjne	a,_now_key,00107$
                                   2186 ;	./src/main.c:368: nxt_row = (now_row >= 7)? now_row:now_row+1;
      000969 C3               [12] 2187 	clr	c
      00096A E5*17            [12] 2188 	mov	a,_now_row
      00096C 94 07            [12] 2189 	subb	a,#0x07
      00096E 92*02            [24] 2190 	mov	_mode3_sloc0_1_0,c
      000970 40 04            [24] 2191 	jc	00161$
      000972 AF*17            [24] 2192 	mov	r7,_now_row
      000974 80 05            [24] 2193 	sjmp	00162$
      000976                       2194 00161$:
      000976 E5*17            [12] 2195 	mov	a,_now_row
      000978 FE               [12] 2196 	mov	r6,a
      000979 04               [12] 2197 	inc	a
      00097A FF               [12] 2198 	mov	r7,a
      00097B                       2199 00162$:
      00097B 8F*15            [24] 2200 	mov	_nxt_row,r7
      00097D 80 39            [24] 2201 	sjmp	00111$
      00097F                       2202 00107$:
                                   2203 ;	./src/main.c:369: }else if (now_key == 5){
      00097F 74 05            [12] 2204 	mov	a,#0x05
      000981 B5*08 1B         [24] 2205 	cjne	a,_now_key,00104$
                                   2206 ;	./src/main.c:370: nxt_col = (now_col <= 1)? 1:now_col-1;
      000984 E5*18            [12] 2207 	mov	a,_now_col
      000986 24 FE            [12] 2208 	add	a,#0xff - 0x01
      000988 92*02            [24] 2209 	mov	_mode3_sloc0_1_0,c
      00098A 40 06            [24] 2210 	jc	00163$
      00098C 7E 01            [12] 2211 	mov	r6,#0x01
      00098E 7F 00            [12] 2212 	mov	r7,#0x00
      000990 80 09            [24] 2213 	sjmp	00164$
      000992                       2214 00163$:
      000992 AD*18            [24] 2215 	mov	r5,_now_col
      000994 1D               [12] 2216 	dec	r5
      000995 ED               [12] 2217 	mov	a,r5
      000996 FE               [12] 2218 	mov	r6,a
      000997 33               [12] 2219 	rlc	a
      000998 95 E0            [12] 2220 	subb	a,acc
      00099A FF               [12] 2221 	mov	r7,a
      00099B                       2222 00164$:
      00099B 8E*16            [24] 2223 	mov	_nxt_col,r6
      00099D 80 19            [24] 2224 	sjmp	00111$
      00099F                       2225 00104$:
                                   2226 ;	./src/main.c:371: }else if (now_key == 6){
      00099F 74 06            [12] 2227 	mov	a,#0x06
      0009A1 B5*08 14         [24] 2228 	cjne	a,_now_key,00111$
                                   2229 ;	./src/main.c:372: nxt_col = (now_col >= 8)? now_col:now_col+1;
      0009A4 C3               [12] 2230 	clr	c
      0009A5 E5*18            [12] 2231 	mov	a,_now_col
      0009A7 94 08            [12] 2232 	subb	a,#0x08
      0009A9 92*02            [24] 2233 	mov	_mode3_sloc0_1_0,c
      0009AB 40 04            [24] 2234 	jc	00165$
      0009AD AF*18            [24] 2235 	mov	r7,_now_col
      0009AF 80 05            [24] 2236 	sjmp	00166$
      0009B1                       2237 00165$:
      0009B1 E5*18            [12] 2238 	mov	a,_now_col
      0009B3 FE               [12] 2239 	mov	r6,a
      0009B4 04               [12] 2240 	inc	a
      0009B5 FF               [12] 2241 	mov	r7,a
      0009B6                       2242 00166$:
      0009B6 8F*16            [24] 2243 	mov	_nxt_col,r7
      0009B8                       2244 00111$:
                                   2245 ;	./src/main.c:374: now_col = nxt_col;
      0009B8 85*16*18         [24] 2246 	mov	_now_col,_nxt_col
                                   2247 ;	./src/main.c:375: now_row = nxt_row;
      0009BB 85*15*17         [24] 2248 	mov	_now_row,_nxt_row
                                   2249 ;	./src/main.c:376: player[turn][0] = now_col;
      0009BE E5*1B            [12] 2250 	mov	a,_turn
      0009C0 25*1B            [12] 2251 	add	a,_turn
      0009C2 24r24            [12] 2252 	add	a,#_player
      0009C4 F8               [12] 2253 	mov	r0,a
      0009C5 A6*18            [24] 2254 	mov	@r0,_now_col
                                   2255 ;	./src/main.c:377: player[turn][1] = now_row;
      0009C7 E5*1B            [12] 2256 	mov	a,_turn
      0009C9 25*1B            [12] 2257 	add	a,_turn
      0009CB 24r24            [12] 2258 	add	a,#_player
      0009CD FF               [12] 2259 	mov	r7,a
      0009CE 04               [12] 2260 	inc	a
      0009CF F8               [12] 2261 	mov	r0,a
      0009D0 A6*17            [24] 2262 	mov	@r0,_now_row
      0009D2                       2263 00115$:
                                   2264 ;	./src/main.c:381: if (but1 == 0){ // 按下but1，跳過自己回合
      0009D2 20 B2 23         [24] 2265 	jb	_INT0,00119$
                                   2266 ;	./src/main.c:382: delay_ms(10);
      0009D5 90 00 0A         [24] 2267 	mov	dptr,#0x000a
      0009D8 12r00r00         [24] 2268 	lcall	_delay_ms
                                   2269 ;	./src/main.c:383: if (but1 == 0){
      0009DB 20 B2 1A         [24] 2270 	jb	_INT0,00119$
                                   2271 ;	./src/main.c:384: player[turn][0] = now_col;
      0009DE E5*1B            [12] 2272 	mov	a,_turn
      0009E0 25*1B            [12] 2273 	add	a,_turn
      0009E2 24r24            [12] 2274 	add	a,#_player
      0009E4 F8               [12] 2275 	mov	r0,a
      0009E5 A6*18            [24] 2276 	mov	@r0,_now_col
                                   2277 ;	./src/main.c:385: player[turn][1] = now_row;
      0009E7 E5*1B            [12] 2278 	mov	a,_turn
      0009E9 25*1B            [12] 2279 	add	a,_turn
      0009EB 24r24            [12] 2280 	add	a,#_player
      0009ED FF               [12] 2281 	mov	r7,a
      0009EE 04               [12] 2282 	inc	a
      0009EF F8               [12] 2283 	mov	r0,a
      0009F0 A6*17            [24] 2284 	mov	@r0,_now_row
                                   2285 ;	./src/main.c:386: mode = 4;
      0009F2 75*02 04         [24] 2286 	mov	_mode,#0x04
                                   2287 ;	./src/main.c:387: break;
      0009F5 02r0Br6D         [24] 2288 	ljmp	00144$
      0009F8                       2289 00119$:
                                   2290 ;	./src/main.c:390: if (but2 == 0){ // 按but2，猜格子
      0009F8 30 B3 03         [24] 2291 	jnb	_INT1,00313$
      0009FB 02r0ArDD         [24] 2292 	ljmp	00133$
      0009FE                       2293 00313$:
                                   2294 ;	./src/main.c:391: delay_ms(10);
      0009FE 90 00 0A         [24] 2295 	mov	dptr,#0x000a
      000A01 12r00r00         [24] 2296 	lcall	_delay_ms
                                   2297 ;	./src/main.c:392: if (but2 == 0){
      000A04 30 B3 03         [24] 2298 	jnb	_INT1,00314$
      000A07 02r0ArDD         [24] 2299 	ljmp	00133$
      000A0A                       2300 00314$:
                                   2301 ;	./src/main.c:393: if (Get_Dot(now_col, now_row, 2) != 0){ // 猜重複格子
      000A0A 85*17*00         [24] 2302 	mov	_Get_Dot_PARM_2,_now_row
      000A0D 75*01 02         [24] 2303 	mov	_Get_Dot_PARM_3,#0x02
      000A10 85*18 82         [24] 2304 	mov	dpl,_now_col
      000A13 12r0Dr93         [24] 2305 	lcall	_Get_Dot
      000A16 E5 82            [12] 2306 	mov	a,dpl
      000A18 60 27            [24] 2307 	jz	00122$
                                   2308 ;	./src/main.c:394: for(in_i = 0;in_i < 523;in_i++){
      000A1A E4               [12] 2309 	clr	a
      000A1B F5*00            [12] 2310 	mov	_in_i,a
      000A1D F5*01            [12] 2311 	mov	(_in_i + 1),a
      000A1F                       2312 00147$:
                                   2313 ;	./src/main.c:395: P3_7 = 1;
                                   2314 ;	assignBit
      000A1F D2 B7            [12] 2315 	setb	_P3_7
                                   2316 ;	./src/main.c:396: Delay_Do();
      000A21 12r00r00         [24] 2317 	lcall	_Delay_Do
                                   2318 ;	./src/main.c:397: P3_7 = 0;
                                   2319 ;	assignBit
      000A24 C2 B7            [12] 2320 	clr	_P3_7
                                   2321 ;	./src/main.c:398: Delay_Do();
      000A26 12r00r00         [24] 2322 	lcall	_Delay_Do
                                   2323 ;	./src/main.c:394: for(in_i = 0;in_i < 523;in_i++){
      000A29 05*00            [12] 2324 	inc	_in_i
      000A2B E4               [12] 2325 	clr	a
      000A2C B5*00 02         [24] 2326 	cjne	a,_in_i,00316$
      000A2F 05*01            [12] 2327 	inc	(_in_i + 1)
      000A31                       2328 00316$:
      000A31 C3               [12] 2329 	clr	c
      000A32 E5*00            [12] 2330 	mov	a,_in_i
      000A34 94 0B            [12] 2331 	subb	a,#0x0b
      000A36 E5*01            [12] 2332 	mov	a,(_in_i + 1)
      000A38 64 80            [12] 2333 	xrl	a,#0x80
      000A3A 94 82            [12] 2334 	subb	a,#0x82
      000A3C 40 E1            [24] 2335 	jc	00147$
                                   2336 ;	./src/main.c:400: continue;
      000A3E 02r08r97         [24] 2337 	ljmp	00142$
      000A41                       2338 00122$:
                                   2339 ;	./src/main.c:402: draw(now_col, now_row, now_col, now_row, 2); // 記錄這一點有猜過
      000A41 85*17*00         [24] 2340 	mov	_draw_PARM_2,_now_row
      000A44 85*18*01         [24] 2341 	mov	_draw_PARM_3,_now_col
      000A47 85*17*02         [24] 2342 	mov	_draw_PARM_4,_now_row
      000A4A 75*03 02         [24] 2343 	mov	_draw_PARM_5,#0x02
      000A4D 85*18 82         [24] 2344 	mov	dpl,_now_col
      000A50 12r0Cr9D         [24] 2345 	lcall	_draw
                                   2346 ;	./src/main.c:403: if ((Get_Dot(now_col, now_row, 1) == 0)){    // 猜錯
      000A53 85*17*00         [24] 2347 	mov	_Get_Dot_PARM_2,_now_row
      000A56 75*01 01         [24] 2348 	mov	_Get_Dot_PARM_3,#0x01
      000A59 85*18 82         [24] 2349 	mov	dpl,_now_col
      000A5C 12r0Dr93         [24] 2350 	lcall	_Get_Dot
      000A5F E5 82            [12] 2351 	mov	a,dpl
                                   2352 ;	./src/main.c:404: for(in_i = 0;in_i < 523;in_i++){
      000A61 70 3D            [24] 2353 	jnz	00128$
      000A63 F5*00            [12] 2354 	mov	_in_i,a
      000A65 F5*01            [12] 2355 	mov	(_in_i + 1),a
      000A67                       2356 00149$:
                                   2357 ;	./src/main.c:405: P3_7 = 1;
                                   2358 ;	assignBit
      000A67 D2 B7            [12] 2359 	setb	_P3_7
                                   2360 ;	./src/main.c:406: Delay_Do();
      000A69 12r00r00         [24] 2361 	lcall	_Delay_Do
                                   2362 ;	./src/main.c:407: P3_7 = 0;
                                   2363 ;	assignBit
      000A6C C2 B7            [12] 2364 	clr	_P3_7
                                   2365 ;	./src/main.c:408: Delay_Do();
      000A6E 12r00r00         [24] 2366 	lcall	_Delay_Do
                                   2367 ;	./src/main.c:404: for(in_i = 0;in_i < 523;in_i++){
      000A71 05*00            [12] 2368 	inc	_in_i
      000A73 E4               [12] 2369 	clr	a
      000A74 B5*00 02         [24] 2370 	cjne	a,_in_i,00319$
      000A77 05*01            [12] 2371 	inc	(_in_i + 1)
      000A79                       2372 00319$:
      000A79 C3               [12] 2373 	clr	c
      000A7A E5*00            [12] 2374 	mov	a,_in_i
      000A7C 94 0B            [12] 2375 	subb	a,#0x0b
      000A7E E5*01            [12] 2376 	mov	a,(_in_i + 1)
      000A80 64 80            [12] 2377 	xrl	a,#0x80
      000A82 94 82            [12] 2378 	subb	a,#0x82
      000A84 40 E1            [24] 2379 	jc	00149$
                                   2380 ;	./src/main.c:410: player[turn][0] = now_col;
      000A86 E5*1B            [12] 2381 	mov	a,_turn
      000A88 25*1B            [12] 2382 	add	a,_turn
      000A8A 24r24            [12] 2383 	add	a,#_player
      000A8C F8               [12] 2384 	mov	r0,a
      000A8D A6*18            [24] 2385 	mov	@r0,_now_col
                                   2386 ;	./src/main.c:411: player[turn][1] = now_row;
      000A8F E5*1B            [12] 2387 	mov	a,_turn
      000A91 25*1B            [12] 2388 	add	a,_turn
      000A93 24r24            [12] 2389 	add	a,#_player
      000A95 FF               [12] 2390 	mov	r7,a
      000A96 04               [12] 2391 	inc	a
      000A97 F8               [12] 2392 	mov	r0,a
      000A98 A6*17            [24] 2393 	mov	@r0,_now_row
                                   2394 ;	./src/main.c:412: mode = 4; // 跳出mode3 迴圈，換mode4 player2 猜
      000A9A 75*02 04         [24] 2395 	mov	_mode,#0x04
                                   2396 ;	./src/main.c:413: break;
      000A9D 02r0Br6D         [24] 2397 	ljmp	00144$
      000AA0                       2398 00128$:
                                   2399 ;	./src/main.c:415: for(in_i = 0;in_i < 588;in_i++){// 猜對
      000AA0 E4               [12] 2400 	clr	a
      000AA1 F5*00            [12] 2401 	mov	_in_i,a
      000AA3 F5*01            [12] 2402 	mov	(_in_i + 1),a
      000AA5                       2403 00151$:
                                   2404 ;	./src/main.c:416: P3_7 = 1;
                                   2405 ;	assignBit
      000AA5 D2 B7            [12] 2406 	setb	_P3_7
                                   2407 ;	./src/main.c:417: Delay_Re();
      000AA7 12r00r00         [24] 2408 	lcall	_Delay_Re
                                   2409 ;	./src/main.c:418: P3_7 = 0;
                                   2410 ;	assignBit
      000AAA C2 B7            [12] 2411 	clr	_P3_7
                                   2412 ;	./src/main.c:419: Delay_Re();
      000AAC 12r00r00         [24] 2413 	lcall	_Delay_Re
                                   2414 ;	./src/main.c:415: for(in_i = 0;in_i < 588;in_i++){// 猜對
      000AAF 05*00            [12] 2415 	inc	_in_i
      000AB1 E4               [12] 2416 	clr	a
      000AB2 B5*00 02         [24] 2417 	cjne	a,_in_i,00321$
      000AB5 05*01            [12] 2418 	inc	(_in_i + 1)
      000AB7                       2419 00321$:
      000AB7 C3               [12] 2420 	clr	c
      000AB8 E5*00            [12] 2421 	mov	a,_in_i
      000ABA 94 4C            [12] 2422 	subb	a,#0x4c
      000ABC E5*01            [12] 2423 	mov	a,(_in_i + 1)
      000ABE 64 80            [12] 2424 	xrl	a,#0x80
      000AC0 94 82            [12] 2425 	subb	a,#0x82
      000AC2 40 E1            [24] 2426 	jc	00151$
                                   2427 ;	./src/main.c:421: player_score[turn]+=1;
      000AC4 E5*1B            [12] 2428 	mov	a,_turn
      000AC6 24r2A            [12] 2429 	add	a,#_player_score
      000AC8 F9               [12] 2430 	mov	r1,a
      000AC9 07               [12] 2431 	inc	@r1
      000ACA E7               [12] 2432 	mov	a,@r1
                                   2433 ;	./src/main.c:422: if (player_score[turn] >= 17){ // 判斷自己有沒有贏
      000ACB E5*1B            [12] 2434 	mov	a,_turn
      000ACD 24r2A            [12] 2435 	add	a,#_player_score
      000ACF F9               [12] 2436 	mov	r1,a
      000AD0 87 07            [24] 2437 	mov	ar7,@r1
      000AD2 BF 11 00         [24] 2438 	cjne	r7,#0x11,00323$
      000AD5                       2439 00323$:
      000AD5 40 06            [24] 2440 	jc	00133$
                                   2441 ;	./src/main.c:423: winner = turn;
      000AD7 85*1B*03         [24] 2442 	mov	_winner,_turn
                                   2443 ;	./src/main.c:424: break;
      000ADA 02r0Br6D         [24] 2444 	ljmp	00144$
      000ADD                       2445 00133$:
                                   2446 ;	./src/main.c:430: for (i=1;i<=8;i++){
      000ADD 75*0D 01         [24] 2447 	mov	_i,#0x01
      000AE0                       2448 00153$:
                                   2449 ;	./src/main.c:431: if (i == now_col)mask = 1 << now_row; // 記得顯示當前鼠標的位置
      000AE0 E5*18            [12] 2450 	mov	a,_now_col
      000AE2 B5*0D 13         [24] 2451 	cjne	a,_i,00135$
      000AE5 AF*17            [24] 2452 	mov	r7,_now_row
      000AE7 8F F0            [24] 2453 	mov	b,r7
      000AE9 05 F0            [12] 2454 	inc	b
      000AEB 74 01            [12] 2455 	mov	a,#0x01
      000AED 80 02            [24] 2456 	sjmp	00329$
      000AEF                       2457 00327$:
      000AEF 25 E0            [12] 2458 	add	a,acc
      000AF1                       2459 00329$:
      000AF1 D5 F0 FB         [24] 2460 	djnz	b,00327$
      000AF4 F5*07            [12] 2461 	mov	_mask,a
      000AF6 80 03            [24] 2462 	sjmp	00136$
      000AF8                       2463 00135$:
                                   2464 ;	./src/main.c:432: else mask = 0;
      000AF8 75*07 00         [24] 2465 	mov	_mask,#0x00
      000AFB                       2466 00136$:
                                   2467 ;	./src/main.c:433: Writesingle7219(1, i, (mat1_2[i] | mask));
      000AFB E5*0D            [12] 2468 	mov	a,_i
      000AFD 24r36            [12] 2469 	add	a,#_mat1_2
      000AFF F9               [12] 2470 	mov	r1,a
      000B00 87 07            [24] 2471 	mov	ar7,@r1
      000B02 E5*07            [12] 2472 	mov	a,_mask
      000B04 4F               [12] 2473 	orl	a,r7
      000B05 F5*00            [12] 2474 	mov	_Writesingle7219_PARM_3,a
      000B07 85*0D*00         [24] 2475 	mov	_Writesingle7219_PARM_2,_i
      000B0A 75 82 01         [24] 2476 	mov	dpl,#0x01
      000B0D 12r00r00         [24] 2477 	lcall	_Writesingle7219
                                   2478 ;	./src/main.c:430: for (i=1;i<=8;i++){
      000B10 05*0D            [12] 2479 	inc	_i
      000B12 E5*0D            [12] 2480 	mov	a,_i
      000B14 24 F7            [12] 2481 	add	a,#0xff - 0x08
      000B16 50 C8            [24] 2482 	jnc	00153$
                                   2483 ;	./src/main.c:434: }delay_ms(100);
      000B18 90 00 64         [24] 2484 	mov	dptr,#0x0064
      000B1B 12r00r00         [24] 2485 	lcall	_delay_ms
                                   2486 ;	./src/main.c:435: for (i=1;i<=8;i++){
      000B1E 75*0D 01         [24] 2487 	mov	_i,#0x01
      000B21                       2488 00155$:
                                   2489 ;	./src/main.c:436: mask = 0;
      000B21 75*07 00         [24] 2490 	mov	_mask,#0x00
                                   2491 ;	./src/main.c:437: if (now_col == i)mask |= 1<<now_row; // 鼠標的位置
      000B24 E5*0D            [12] 2492 	mov	a,_i
      000B26 B5*18 13         [24] 2493 	cjne	a,_now_col,00139$
      000B29 AF*17            [24] 2494 	mov	r7,_now_row
      000B2B 8F F0            [24] 2495 	mov	b,r7
      000B2D 05 F0            [12] 2496 	inc	b
      000B2F 74 01            [12] 2497 	mov	a,#0x01
      000B31 80 02            [24] 2498 	sjmp	00335$
      000B33                       2499 00333$:
      000B33 25 E0            [12] 2500 	add	a,acc
      000B35                       2501 00335$:
      000B35 D5 F0 FB         [24] 2502 	djnz	b,00333$
      000B38 F5*07            [12] 2503 	mov	_mask,a
      000B3A 80 03            [24] 2504 	sjmp	00140$
      000B3C                       2505 00139$:
                                   2506 ;	./src/main.c:438: else mask = 0;
      000B3C 75*07 00         [24] 2507 	mov	_mask,#0x00
      000B3F                       2508 00140$:
                                   2509 ;	./src/main.c:439: mask |= (mat2_2[i] & mat1_2[i]);     // 實際猜對的位置
      000B3F E5*0D            [12] 2510 	mov	a,_i
      000B41 24r48            [12] 2511 	add	a,#_mat2_2
      000B43 F9               [12] 2512 	mov	r1,a
      000B44 87 07            [24] 2513 	mov	ar7,@r1
      000B46 E5*0D            [12] 2514 	mov	a,_i
      000B48 24r36            [12] 2515 	add	a,#_mat1_2
      000B4A F9               [12] 2516 	mov	r1,a
      000B4B E7               [12] 2517 	mov	a,@r1
      000B4C 5F               [12] 2518 	anl	a,r7
      000B4D 42*07            [12] 2519 	orl	_mask,a
                                   2520 ;	./src/main.c:440: mask = ~mask;
      000B4F E5*07            [12] 2521 	mov	a,_mask
      000B51 F4               [12] 2522 	cpl	a
                                   2523 ;	./src/main.c:441: Writesingle7219(1, i, mat1_2[i]&mask); // 將上述的位置的燈熄滅，以達到閃爍的效果
      000B52 F5*07            [12] 2524 	mov	_mask,a
      000B54 87 07            [24] 2525 	mov	ar7,@r1
      000B56 5F               [12] 2526 	anl	a,r7
      000B57 F5*00            [12] 2527 	mov	_Writesingle7219_PARM_3,a
      000B59 85*0D*00         [24] 2528 	mov	_Writesingle7219_PARM_2,_i
      000B5C 75 82 01         [24] 2529 	mov	dpl,#0x01
      000B5F 12r00r00         [24] 2530 	lcall	_Writesingle7219
                                   2531 ;	./src/main.c:435: for (i=1;i<=8;i++){
      000B62 05*0D            [12] 2532 	inc	_i
      000B64 E5*0D            [12] 2533 	mov	a,_i
      000B66 24 F7            [12] 2534 	add	a,#0xff - 0x08
      000B68 50 B7            [24] 2535 	jnc	00155$
      000B6A 02r08r97         [24] 2536 	ljmp	00142$
      000B6D                       2537 00144$:
                                   2538 ;	./src/main.c:444: if (winner != 0){
      000B6D E5*03            [12] 2539 	mov	a,_winner
      000B6F 60 03            [24] 2540 	jz	00157$
                                   2541 ;	./src/main.c:445: mode = 5;
      000B71 75*02 05         [24] 2542 	mov	_mode,#0x05
      000B74                       2543 00157$:
                                   2544 ;	./src/main.c:450: }
      000B74 22               [24] 2545 	ret
                                   2546 ;------------------------------------------------------------
                                   2547 ;Allocation info for local variables in function 'overlap'
                                   2548 ;------------------------------------------------------------
                                   2549 ;y1                        Allocated with name '_overlap_PARM_2'
                                   2550 ;h1                        Allocated with name '_overlap_PARM_3'
                                   2551 ;w1                        Allocated with name '_overlap_PARM_4'
                                   2552 ;x2                        Allocated with name '_overlap_PARM_5'
                                   2553 ;y2                        Allocated with name '_overlap_PARM_6'
                                   2554 ;h2                        Allocated with name '_overlap_PARM_7'
                                   2555 ;w2                        Allocated with name '_overlap_PARM_8'
                                   2556 ;x1                        Allocated to registers r7 
                                   2557 ;------------------------------------------------------------
                                   2558 ;	./src/main.c:451: char overlap(char x1, char y1, char h1, char w1,
                                   2559 ;	-----------------------------------------
                                   2560 ;	 function overlap
                                   2561 ;	-----------------------------------------
      000B75                       2562 _overlap:
      000B75 AF 82            [24] 2563 	mov	r7,dpl
                                   2564 ;	./src/main.c:453: for (i=x1;i<x1+h1;i++){
      000B77 8F*0D            [24] 2565 	mov	_i,r7
      000B79                       2566 00113$:
      000B79 8F 05            [24] 2567 	mov	ar5,r7
      000B7B 7E 00            [12] 2568 	mov	r6,#0x00
      000B7D AB*01            [24] 2569 	mov	r3,_overlap_PARM_3
      000B7F 7C 00            [12] 2570 	mov	r4,#0x00
      000B81 EB               [12] 2571 	mov	a,r3
      000B82 2D               [12] 2572 	add	a,r5
      000B83 FD               [12] 2573 	mov	r5,a
      000B84 EC               [12] 2574 	mov	a,r4
      000B85 3E               [12] 2575 	addc	a,r6
      000B86 FE               [12] 2576 	mov	r6,a
      000B87 AB*0D            [24] 2577 	mov	r3,_i
      000B89 7C 00            [12] 2578 	mov	r4,#0x00
      000B8B C3               [12] 2579 	clr	c
      000B8C EB               [12] 2580 	mov	a,r3
      000B8D 9D               [12] 2581 	subb	a,r5
      000B8E EC               [12] 2582 	mov	a,r4
      000B8F 64 80            [12] 2583 	xrl	a,#0x80
      000B91 8E F0            [24] 2584 	mov	b,r6
      000B93 63 F0 80         [24] 2585 	xrl	b,#0x80
      000B96 95 F0            [12] 2586 	subb	a,b
      000B98 40 03            [24] 2587 	jc	00149$
      000B9A 02r0Cr1B         [24] 2588 	ljmp	00108$
      000B9D                       2589 00149$:
                                   2590 ;	./src/main.c:454: for (j=y1;j<y1+w1;j++){
      000B9D AE*00            [24] 2591 	mov	r6,_overlap_PARM_2
      000B9F 8E*0E            [24] 2592 	mov	_j,r6
      000BA1                       2593 00110$:
      000BA1 8E 04            [24] 2594 	mov	ar4,r6
      000BA3 7D 00            [12] 2595 	mov	r5,#0x00
      000BA5 AA*02            [24] 2596 	mov	r2,_overlap_PARM_4
      000BA7 7B 00            [12] 2597 	mov	r3,#0x00
      000BA9 EA               [12] 2598 	mov	a,r2
      000BAA 2C               [12] 2599 	add	a,r4
      000BAB FC               [12] 2600 	mov	r4,a
      000BAC EB               [12] 2601 	mov	a,r3
      000BAD 3D               [12] 2602 	addc	a,r5
      000BAE FD               [12] 2603 	mov	r5,a
      000BAF AA*0E            [24] 2604 	mov	r2,_j
      000BB1 7B 00            [12] 2605 	mov	r3,#0x00
      000BB3 C3               [12] 2606 	clr	c
      000BB4 EA               [12] 2607 	mov	a,r2
      000BB5 9C               [12] 2608 	subb	a,r4
      000BB6 EB               [12] 2609 	mov	a,r3
      000BB7 64 80            [12] 2610 	xrl	a,#0x80
      000BB9 8D F0            [24] 2611 	mov	b,r5
      000BBB 63 F0 80         [24] 2612 	xrl	b,#0x80
      000BBE 95 F0            [12] 2613 	subb	a,b
      000BC0 50 54            [24] 2614 	jnc	00114$
                                   2615 ;	./src/main.c:456: if ((i >= x2) && (i < x2 + h2)){
      000BC2 C3               [12] 2616 	clr	c
      000BC3 E5*0D            [12] 2617 	mov	a,_i
      000BC5 95*03            [12] 2618 	subb	a,_overlap_PARM_5
      000BC7 40 49            [24] 2619 	jc	00111$
      000BC9 AC*03            [24] 2620 	mov	r4,_overlap_PARM_5
      000BCB 7D 00            [12] 2621 	mov	r5,#0x00
      000BCD A8*05            [24] 2622 	mov	r0,_overlap_PARM_7
      000BCF 79 00            [12] 2623 	mov	r1,#0x00
      000BD1 E8               [12] 2624 	mov	a,r0
      000BD2 2C               [12] 2625 	add	a,r4
      000BD3 FC               [12] 2626 	mov	r4,a
      000BD4 E9               [12] 2627 	mov	a,r1
      000BD5 3D               [12] 2628 	addc	a,r5
      000BD6 FD               [12] 2629 	mov	r5,a
      000BD7 A8*0D            [24] 2630 	mov	r0,_i
      000BD9 79 00            [12] 2631 	mov	r1,#0x00
      000BDB C3               [12] 2632 	clr	c
      000BDC E8               [12] 2633 	mov	a,r0
      000BDD 9C               [12] 2634 	subb	a,r4
      000BDE E9               [12] 2635 	mov	a,r1
      000BDF 64 80            [12] 2636 	xrl	a,#0x80
      000BE1 8D F0            [24] 2637 	mov	b,r5
      000BE3 63 F0 80         [24] 2638 	xrl	b,#0x80
      000BE6 95 F0            [12] 2639 	subb	a,b
      000BE8 50 28            [24] 2640 	jnc	00111$
                                   2641 ;	./src/main.c:457: if ((j >= y2) && (j < y2+w2)){
      000BEA C3               [12] 2642 	clr	c
      000BEB E5*0E            [12] 2643 	mov	a,_j
      000BED 95*04            [12] 2644 	subb	a,_overlap_PARM_6
      000BEF 40 21            [24] 2645 	jc	00111$
      000BF1 AC*04            [24] 2646 	mov	r4,_overlap_PARM_6
      000BF3 7D 00            [12] 2647 	mov	r5,#0x00
      000BF5 A8*06            [24] 2648 	mov	r0,_overlap_PARM_8
      000BF7 79 00            [12] 2649 	mov	r1,#0x00
      000BF9 E8               [12] 2650 	mov	a,r0
      000BFA 2C               [12] 2651 	add	a,r4
      000BFB FC               [12] 2652 	mov	r4,a
      000BFC E9               [12] 2653 	mov	a,r1
      000BFD 3D               [12] 2654 	addc	a,r5
      000BFE FD               [12] 2655 	mov	r5,a
      000BFF C3               [12] 2656 	clr	c
      000C00 EA               [12] 2657 	mov	a,r2
      000C01 9C               [12] 2658 	subb	a,r4
      000C02 EB               [12] 2659 	mov	a,r3
      000C03 64 80            [12] 2660 	xrl	a,#0x80
      000C05 8D F0            [24] 2661 	mov	b,r5
      000C07 63 F0 80         [24] 2662 	xrl	b,#0x80
      000C0A 95 F0            [12] 2663 	subb	a,b
      000C0C 50 04            [24] 2664 	jnc	00111$
                                   2665 ;	./src/main.c:458: return 1;
      000C0E 75 82 01         [24] 2666 	mov	dpl,#0x01
      000C11 22               [24] 2667 	ret
      000C12                       2668 00111$:
                                   2669 ;	./src/main.c:454: for (j=y1;j<y1+w1;j++){
      000C12 05*0E            [12] 2670 	inc	_j
      000C14 80 8B            [24] 2671 	sjmp	00110$
      000C16                       2672 00114$:
                                   2673 ;	./src/main.c:453: for (i=x1;i<x1+h1;i++){
      000C16 05*0D            [12] 2674 	inc	_i
      000C18 02r0Br79         [24] 2675 	ljmp	00113$
      000C1B                       2676 00108$:
                                   2677 ;	./src/main.c:462: }return 0;
      000C1B 75 82 00         [24] 2678 	mov	dpl,#0x00
                                   2679 ;	./src/main.c:463: }
      000C1E 22               [24] 2680 	ret
                                   2681 ;------------------------------------------------------------
                                   2682 ;Allocation info for local variables in function 'del'
                                   2683 ;------------------------------------------------------------
                                   2684 ;y1                        Allocated with name '_del_PARM_2'
                                   2685 ;x2                        Allocated with name '_del_PARM_3'
                                   2686 ;y2                        Allocated with name '_del_PARM_4'
                                   2687 ;type                      Allocated with name '_del_PARM_5'
                                   2688 ;x1                        Allocated to registers r7 
                                   2689 ;------------------------------------------------------------
                                   2690 ;	./src/main.c:465: void del(char x1, char y1, char x2, char y2, char type){
                                   2691 ;	-----------------------------------------
                                   2692 ;	 function del
                                   2693 ;	-----------------------------------------
      000C1F                       2694 _del:
      000C1F AF 82            [24] 2695 	mov	r7,dpl
                                   2696 ;	./src/main.c:466: if (type == 0){// mat1_1
      000C21 E5*03            [12] 2697 	mov	a,_del_PARM_5
      000C23 70 39            [24] 2698 	jnz	00104$
                                   2699 ;	./src/main.c:467: for (i=x1;i<=x2;i++){
      000C25 8F*0D            [24] 2700 	mov	_i,r7
      000C27 AE*00            [24] 2701 	mov	r6,_del_PARM_2
      000C29                       2702 00113$:
      000C29 C3               [12] 2703 	clr	c
      000C2A E5*01            [12] 2704 	mov	a,_del_PARM_3
      000C2C 95*0D            [12] 2705 	subb	a,_i
      000C2E 40 2E            [24] 2706 	jc	00104$
                                   2707 ;	./src/main.c:468: for (j=y1;j<=y2;j++){
      000C30 8E*0E            [24] 2708 	mov	_j,r6
      000C32                       2709 00110$:
      000C32 C3               [12] 2710 	clr	c
      000C33 E5*02            [12] 2711 	mov	a,_del_PARM_4
      000C35 95*0E            [12] 2712 	subb	a,_j
      000C37 40 21            [24] 2713 	jc	00114$
                                   2714 ;	./src/main.c:469: mask = 1<<j;
      000C39 AD*0E            [24] 2715 	mov	r5,_j
      000C3B 8D F0            [24] 2716 	mov	b,r5
      000C3D 05 F0            [12] 2717 	inc	b
      000C3F 74 01            [12] 2718 	mov	a,#0x01
      000C41 80 02            [24] 2719 	sjmp	00168$
      000C43                       2720 00166$:
      000C43 25 E0            [12] 2721 	add	a,acc
      000C45                       2722 00168$:
      000C45 D5 F0 FB         [24] 2723 	djnz	b,00166$
                                   2724 ;	./src/main.c:470: mask = ~mask;
      000C48 F4               [12] 2725 	cpl	a
      000C49 F5*07            [12] 2726 	mov	_mask,a
                                   2727 ;	./src/main.c:471: mat1_1[i] &= mask;
      000C4B E5*0D            [12] 2728 	mov	a,_i
      000C4D 24r2D            [12] 2729 	add	a,#_mat1_1
      000C4F F9               [12] 2730 	mov	r1,a
      000C50 87 05            [24] 2731 	mov	ar5,@r1
      000C52 E5*07            [12] 2732 	mov	a,_mask
      000C54 5D               [12] 2733 	anl	a,r5
      000C55 F7               [12] 2734 	mov	@r1,a
                                   2735 ;	./src/main.c:468: for (j=y1;j<=y2;j++){
      000C56 05*0E            [12] 2736 	inc	_j
      000C58 80 D8            [24] 2737 	sjmp	00110$
      000C5A                       2738 00114$:
                                   2739 ;	./src/main.c:467: for (i=x1;i<=x2;i++){
      000C5A 05*0D            [12] 2740 	inc	_i
      000C5C 80 CB            [24] 2741 	sjmp	00113$
      000C5E                       2742 00104$:
                                   2743 ;	./src/main.c:475: if (type == 1){// mat2_2
      000C5E 74 01            [12] 2744 	mov	a,#0x01
      000C60 B5*03 39         [24] 2745 	cjne	a,_del_PARM_5,00121$
                                   2746 ;	./src/main.c:476: for (i=x1;i<=x2;i++){
      000C63 8F*0D            [24] 2747 	mov	_i,r7
      000C65 AF*00            [24] 2748 	mov	r7,_del_PARM_2
      000C67                       2749 00119$:
      000C67 C3               [12] 2750 	clr	c
      000C68 E5*01            [12] 2751 	mov	a,_del_PARM_3
      000C6A 95*0D            [12] 2752 	subb	a,_i
      000C6C 40 2E            [24] 2753 	jc	00121$
                                   2754 ;	./src/main.c:477: for (j=y1;j<=y2;j++){
      000C6E 8F*0E            [24] 2755 	mov	_j,r7
      000C70                       2756 00116$:
      000C70 C3               [12] 2757 	clr	c
      000C71 E5*02            [12] 2758 	mov	a,_del_PARM_4
      000C73 95*0E            [12] 2759 	subb	a,_j
      000C75 40 21            [24] 2760 	jc	00120$
                                   2761 ;	./src/main.c:478: mask = 1<<j;
      000C77 AE*0E            [24] 2762 	mov	r6,_j
      000C79 8E F0            [24] 2763 	mov	b,r6
      000C7B 05 F0            [12] 2764 	inc	b
      000C7D 74 01            [12] 2765 	mov	a,#0x01
      000C7F 80 02            [24] 2766 	sjmp	00175$
      000C81                       2767 00173$:
      000C81 25 E0            [12] 2768 	add	a,acc
      000C83                       2769 00175$:
      000C83 D5 F0 FB         [24] 2770 	djnz	b,00173$
                                   2771 ;	./src/main.c:479: mask = ~mask;
      000C86 F4               [12] 2772 	cpl	a
      000C87 F5*07            [12] 2773 	mov	_mask,a
                                   2774 ;	./src/main.c:480: mat2_2[i] &= mask;
      000C89 E5*0D            [12] 2775 	mov	a,_i
      000C8B 24r48            [12] 2776 	add	a,#_mat2_2
      000C8D F9               [12] 2777 	mov	r1,a
      000C8E 87 06            [24] 2778 	mov	ar6,@r1
      000C90 E5*07            [12] 2779 	mov	a,_mask
      000C92 5E               [12] 2780 	anl	a,r6
      000C93 F7               [12] 2781 	mov	@r1,a
                                   2782 ;	./src/main.c:477: for (j=y1;j<=y2;j++){
      000C94 05*0E            [12] 2783 	inc	_j
      000C96 80 D8            [24] 2784 	sjmp	00116$
      000C98                       2785 00120$:
                                   2786 ;	./src/main.c:476: for (i=x1;i<=x2;i++){
      000C98 05*0D            [12] 2787 	inc	_i
      000C9A 80 CB            [24] 2788 	sjmp	00119$
      000C9C                       2789 00121$:
                                   2790 ;	./src/main.c:484: }
      000C9C 22               [24] 2791 	ret
                                   2792 ;------------------------------------------------------------
                                   2793 ;Allocation info for local variables in function 'draw'
                                   2794 ;------------------------------------------------------------
                                   2795 ;y1                        Allocated with name '_draw_PARM_2'
                                   2796 ;x2                        Allocated with name '_draw_PARM_3'
                                   2797 ;y2                        Allocated with name '_draw_PARM_4'
                                   2798 ;type                      Allocated with name '_draw_PARM_5'
                                   2799 ;x1                        Allocated to registers r7 
                                   2800 ;------------------------------------------------------------
                                   2801 ;	./src/main.c:485: void draw(char x1, char y1, char x2, char y2, char type){
                                   2802 ;	-----------------------------------------
                                   2803 ;	 function draw
                                   2804 ;	-----------------------------------------
      000C9D                       2805 _draw:
      000C9D AF 82            [24] 2806 	mov	r7,dpl
                                   2807 ;	./src/main.c:486: if (type == 0){// mat1_1
      000C9F E5*03            [12] 2808 	mov	a,_draw_PARM_5
      000CA1 70 38            [24] 2809 	jnz	00104$
                                   2810 ;	./src/main.c:487: for (i=x1;i<=x2;i++){
      000CA3 8F*0D            [24] 2811 	mov	_i,r7
      000CA5 AE*00            [24] 2812 	mov	r6,_draw_PARM_2
      000CA7                       2813 00121$:
      000CA7 C3               [12] 2814 	clr	c
      000CA8 E5*01            [12] 2815 	mov	a,_draw_PARM_3
      000CAA 95*0D            [12] 2816 	subb	a,_i
      000CAC 40 2D            [24] 2817 	jc	00104$
                                   2818 ;	./src/main.c:488: for (j=y1;j<=y2;j++){
      000CAE 8E*0E            [24] 2819 	mov	_j,r6
      000CB0                       2820 00118$:
      000CB0 C3               [12] 2821 	clr	c
      000CB1 E5*02            [12] 2822 	mov	a,_draw_PARM_4
      000CB3 95*0E            [12] 2823 	subb	a,_j
      000CB5 40 20            [24] 2824 	jc	00122$
                                   2825 ;	./src/main.c:489: mask = 1<<j;
      000CB7 AD*0E            [24] 2826 	mov	r5,_j
      000CB9 8D F0            [24] 2827 	mov	b,r5
      000CBB 05 F0            [12] 2828 	inc	b
      000CBD 74 01            [12] 2829 	mov	a,#0x01
      000CBF 80 02            [24] 2830 	sjmp	00228$
      000CC1                       2831 00226$:
      000CC1 25 E0            [12] 2832 	add	a,acc
      000CC3                       2833 00228$:
      000CC3 D5 F0 FB         [24] 2834 	djnz	b,00226$
      000CC6 F5*07            [12] 2835 	mov	_mask,a
                                   2836 ;	./src/main.c:490: mat1_1[i] |= mask;
      000CC8 E5*0D            [12] 2837 	mov	a,_i
      000CCA 24r2D            [12] 2838 	add	a,#_mat1_1
      000CCC F9               [12] 2839 	mov	r1,a
      000CCD 87 05            [24] 2840 	mov	ar5,@r1
      000CCF E5*07            [12] 2841 	mov	a,_mask
      000CD1 4D               [12] 2842 	orl	a,r5
      000CD2 F7               [12] 2843 	mov	@r1,a
                                   2844 ;	./src/main.c:488: for (j=y1;j<=y2;j++){
      000CD3 05*0E            [12] 2845 	inc	_j
      000CD5 80 D9            [24] 2846 	sjmp	00118$
      000CD7                       2847 00122$:
                                   2848 ;	./src/main.c:487: for (i=x1;i<=x2;i++){
      000CD7 05*0D            [12] 2849 	inc	_i
      000CD9 80 CC            [24] 2850 	sjmp	00121$
      000CDB                       2851 00104$:
                                   2852 ;	./src/main.c:494: if (type == 1){// mat1_1
      000CDB 74 01            [12] 2853 	mov	a,#0x01
      000CDD B5*03 38         [24] 2854 	cjne	a,_draw_PARM_5,00108$
                                   2855 ;	./src/main.c:495: for (i=x1;i<=x2;i++){
      000CE0 8F*0D            [24] 2856 	mov	_i,r7
      000CE2 AE*00            [24] 2857 	mov	r6,_draw_PARM_2
      000CE4                       2858 00127$:
      000CE4 C3               [12] 2859 	clr	c
      000CE5 E5*01            [12] 2860 	mov	a,_draw_PARM_3
      000CE7 95*0D            [12] 2861 	subb	a,_i
      000CE9 40 2D            [24] 2862 	jc	00108$
                                   2863 ;	./src/main.c:496: for (j=y1;j<=y2;j++){
      000CEB 8E*0E            [24] 2864 	mov	_j,r6
      000CED                       2865 00124$:
      000CED C3               [12] 2866 	clr	c
      000CEE E5*02            [12] 2867 	mov	a,_draw_PARM_4
      000CF0 95*0E            [12] 2868 	subb	a,_j
      000CF2 40 20            [24] 2869 	jc	00128$
                                   2870 ;	./src/main.c:497: mask = 1<<j;
      000CF4 AD*0E            [24] 2871 	mov	r5,_j
      000CF6 8D F0            [24] 2872 	mov	b,r5
      000CF8 05 F0            [12] 2873 	inc	b
      000CFA 74 01            [12] 2874 	mov	a,#0x01
      000CFC 80 02            [24] 2875 	sjmp	00235$
      000CFE                       2876 00233$:
      000CFE 25 E0            [12] 2877 	add	a,acc
      000D00                       2878 00235$:
      000D00 D5 F0 FB         [24] 2879 	djnz	b,00233$
      000D03 F5*07            [12] 2880 	mov	_mask,a
                                   2881 ;	./src/main.c:498: mat2_2[i] |= mask;
      000D05 E5*0D            [12] 2882 	mov	a,_i
      000D07 24r48            [12] 2883 	add	a,#_mat2_2
      000D09 F9               [12] 2884 	mov	r1,a
      000D0A 87 05            [24] 2885 	mov	ar5,@r1
      000D0C E5*07            [12] 2886 	mov	a,_mask
      000D0E 4D               [12] 2887 	orl	a,r5
      000D0F F7               [12] 2888 	mov	@r1,a
                                   2889 ;	./src/main.c:496: for (j=y1;j<=y2;j++){
      000D10 05*0E            [12] 2890 	inc	_j
      000D12 80 D9            [24] 2891 	sjmp	00124$
      000D14                       2892 00128$:
                                   2893 ;	./src/main.c:495: for (i=x1;i<=x2;i++){
      000D14 05*0D            [12] 2894 	inc	_i
      000D16 80 CC            [24] 2895 	sjmp	00127$
      000D18                       2896 00108$:
                                   2897 ;	./src/main.c:502: if (type == 2){// mat1_2
      000D18 74 02            [12] 2898 	mov	a,#0x02
      000D1A B5*03 38         [24] 2899 	cjne	a,_draw_PARM_5,00112$
                                   2900 ;	./src/main.c:503: for (i=x1;i<=x2;i++){
      000D1D 8F*0D            [24] 2901 	mov	_i,r7
      000D1F AE*00            [24] 2902 	mov	r6,_draw_PARM_2
      000D21                       2903 00133$:
      000D21 C3               [12] 2904 	clr	c
      000D22 E5*01            [12] 2905 	mov	a,_draw_PARM_3
      000D24 95*0D            [12] 2906 	subb	a,_i
      000D26 40 2D            [24] 2907 	jc	00112$
                                   2908 ;	./src/main.c:504: for (j=y1;j<=y2;j++){
      000D28 8E*0E            [24] 2909 	mov	_j,r6
      000D2A                       2910 00130$:
      000D2A C3               [12] 2911 	clr	c
      000D2B E5*02            [12] 2912 	mov	a,_draw_PARM_4
      000D2D 95*0E            [12] 2913 	subb	a,_j
      000D2F 40 20            [24] 2914 	jc	00134$
                                   2915 ;	./src/main.c:505: mask = 1<<j;
      000D31 AD*0E            [24] 2916 	mov	r5,_j
      000D33 8D F0            [24] 2917 	mov	b,r5
      000D35 05 F0            [12] 2918 	inc	b
      000D37 74 01            [12] 2919 	mov	a,#0x01
      000D39 80 02            [24] 2920 	sjmp	00242$
      000D3B                       2921 00240$:
      000D3B 25 E0            [12] 2922 	add	a,acc
      000D3D                       2923 00242$:
      000D3D D5 F0 FB         [24] 2924 	djnz	b,00240$
      000D40 F5*07            [12] 2925 	mov	_mask,a
                                   2926 ;	./src/main.c:506: mat1_2[i] |= mask;
      000D42 E5*0D            [12] 2927 	mov	a,_i
      000D44 24r36            [12] 2928 	add	a,#_mat1_2
      000D46 F9               [12] 2929 	mov	r1,a
      000D47 87 05            [24] 2930 	mov	ar5,@r1
      000D49 E5*07            [12] 2931 	mov	a,_mask
      000D4B 4D               [12] 2932 	orl	a,r5
      000D4C F7               [12] 2933 	mov	@r1,a
                                   2934 ;	./src/main.c:504: for (j=y1;j<=y2;j++){
      000D4D 05*0E            [12] 2935 	inc	_j
      000D4F 80 D9            [24] 2936 	sjmp	00130$
      000D51                       2937 00134$:
                                   2938 ;	./src/main.c:503: for (i=x1;i<=x2;i++){
      000D51 05*0D            [12] 2939 	inc	_i
      000D53 80 CC            [24] 2940 	sjmp	00133$
      000D55                       2941 00112$:
                                   2942 ;	./src/main.c:510: if (type == 3){// mat2_1
      000D55 74 03            [12] 2943 	mov	a,#0x03
      000D57 B5*03 38         [24] 2944 	cjne	a,_draw_PARM_5,00141$
                                   2945 ;	./src/main.c:511: for (i=x1;i<=x2;i++){
      000D5A 8F*0D            [24] 2946 	mov	_i,r7
      000D5C AF*00            [24] 2947 	mov	r7,_draw_PARM_2
      000D5E                       2948 00139$:
      000D5E C3               [12] 2949 	clr	c
      000D5F E5*01            [12] 2950 	mov	a,_draw_PARM_3
      000D61 95*0D            [12] 2951 	subb	a,_i
      000D63 40 2D            [24] 2952 	jc	00141$
                                   2953 ;	./src/main.c:512: for (j=y1;j<=y2;j++){
      000D65 8F*0E            [24] 2954 	mov	_j,r7
      000D67                       2955 00136$:
      000D67 C3               [12] 2956 	clr	c
      000D68 E5*02            [12] 2957 	mov	a,_draw_PARM_4
      000D6A 95*0E            [12] 2958 	subb	a,_j
      000D6C 40 20            [24] 2959 	jc	00140$
                                   2960 ;	./src/main.c:513: mask = 1<<j;
      000D6E AE*0E            [24] 2961 	mov	r6,_j
      000D70 8E F0            [24] 2962 	mov	b,r6
      000D72 05 F0            [12] 2963 	inc	b
      000D74 74 01            [12] 2964 	mov	a,#0x01
      000D76 80 02            [24] 2965 	sjmp	00249$
      000D78                       2966 00247$:
      000D78 25 E0            [12] 2967 	add	a,acc
      000D7A                       2968 00249$:
      000D7A D5 F0 FB         [24] 2969 	djnz	b,00247$
      000D7D F5*07            [12] 2970 	mov	_mask,a
                                   2971 ;	./src/main.c:514: mat2_1[i] |= mask;
      000D7F E5*0D            [12] 2972 	mov	a,_i
      000D81 24r3F            [12] 2973 	add	a,#_mat2_1
      000D83 F9               [12] 2974 	mov	r1,a
      000D84 87 06            [24] 2975 	mov	ar6,@r1
      000D86 E5*07            [12] 2976 	mov	a,_mask
      000D88 4E               [12] 2977 	orl	a,r6
      000D89 F7               [12] 2978 	mov	@r1,a
                                   2979 ;	./src/main.c:512: for (j=y1;j<=y2;j++){
      000D8A 05*0E            [12] 2980 	inc	_j
      000D8C 80 D9            [24] 2981 	sjmp	00136$
      000D8E                       2982 00140$:
                                   2983 ;	./src/main.c:511: for (i=x1;i<=x2;i++){
      000D8E 05*0D            [12] 2984 	inc	_i
      000D90 80 CC            [24] 2985 	sjmp	00139$
      000D92                       2986 00141$:
                                   2987 ;	./src/main.c:518: }
      000D92 22               [24] 2988 	ret
                                   2989 ;------------------------------------------------------------
                                   2990 ;Allocation info for local variables in function 'Get_Dot'
                                   2991 ;------------------------------------------------------------
                                   2992 ;row                       Allocated with name '_Get_Dot_PARM_2'
                                   2993 ;type                      Allocated with name '_Get_Dot_PARM_3'
                                   2994 ;col                       Allocated to registers r7 
                                   2995 ;------------------------------------------------------------
                                   2996 ;	./src/main.c:519: char Get_Dot(char col, char row,char type){
                                   2997 ;	-----------------------------------------
                                   2998 ;	 function Get_Dot
                                   2999 ;	-----------------------------------------
      000D93                       3000 _Get_Dot:
      000D93 AF 82            [24] 3001 	mov	r7,dpl
                                   3002 ;	./src/main.c:521: if (type == 0){// mat1_1
      000D95 E5*01            [12] 3003 	mov	a,_Get_Dot_PARM_3
      000D97 70 1E            [24] 3004 	jnz	00110$
                                   3005 ;	./src/main.c:522: mask = 1<<row;
      000D99 AE*00            [24] 3006 	mov	r6,_Get_Dot_PARM_2
      000D9B 8E F0            [24] 3007 	mov	b,r6
      000D9D 05 F0            [12] 3008 	inc	b
      000D9F 74 01            [12] 3009 	mov	a,#0x01
      000DA1 80 02            [24] 3010 	sjmp	00133$
      000DA3                       3011 00131$:
      000DA3 25 E0            [12] 3012 	add	a,acc
      000DA5                       3013 00133$:
      000DA5 D5 F0 FB         [24] 3014 	djnz	b,00131$
      000DA8 F5*07            [12] 3015 	mov	_mask,a
                                   3016 ;	./src/main.c:523: get_bit = mask & mat1_1[col];
      000DAA EF               [12] 3017 	mov	a,r7
      000DAB 24r2D            [12] 3018 	add	a,#_mat1_1
      000DAD F9               [12] 3019 	mov	r1,a
      000DAE E7               [12] 3020 	mov	a,@r1
      000DAF 55*07            [12] 3021 	anl	a,_mask
      000DB1 F5*1A            [12] 3022 	mov	_get_bit,a
                                   3023 ;	./src/main.c:524: return get_bit;
      000DB3 85*1A 82         [24] 3024 	mov	dpl,_get_bit
      000DB6 22               [24] 3025 	ret
      000DB7                       3026 00110$:
                                   3027 ;	./src/main.c:526: else if (type == 1){// mat2_2
      000DB7 74 01            [12] 3028 	mov	a,#0x01
      000DB9 B5*01 1E         [24] 3029 	cjne	a,_Get_Dot_PARM_3,00107$
                                   3030 ;	./src/main.c:527: mask = 1<<row;
      000DBC AE*00            [24] 3031 	mov	r6,_Get_Dot_PARM_2
      000DBE 8E F0            [24] 3032 	mov	b,r6
      000DC0 05 F0            [12] 3033 	inc	b
      000DC2 74 01            [12] 3034 	mov	a,#0x01
      000DC4 80 02            [24] 3035 	sjmp	00138$
      000DC6                       3036 00136$:
      000DC6 25 E0            [12] 3037 	add	a,acc
      000DC8                       3038 00138$:
      000DC8 D5 F0 FB         [24] 3039 	djnz	b,00136$
      000DCB F5*07            [12] 3040 	mov	_mask,a
                                   3041 ;	./src/main.c:528: get_bit = mask & mat2_2[col];
      000DCD EF               [12] 3042 	mov	a,r7
      000DCE 24r48            [12] 3043 	add	a,#_mat2_2
      000DD0 F9               [12] 3044 	mov	r1,a
      000DD1 E7               [12] 3045 	mov	a,@r1
      000DD2 55*07            [12] 3046 	anl	a,_mask
      000DD4 F5*1A            [12] 3047 	mov	_get_bit,a
                                   3048 ;	./src/main.c:529: return get_bit;
      000DD6 85*1A 82         [24] 3049 	mov	dpl,_get_bit
      000DD9 22               [24] 3050 	ret
      000DDA                       3051 00107$:
                                   3052 ;	./src/main.c:531: else if (type == 2){// mat1_2
      000DDA 74 02            [12] 3053 	mov	a,#0x02
      000DDC B5*01 1E         [24] 3054 	cjne	a,_Get_Dot_PARM_3,00104$
                                   3055 ;	./src/main.c:532: mask = 1<<row;
      000DDF AE*00            [24] 3056 	mov	r6,_Get_Dot_PARM_2
      000DE1 8E F0            [24] 3057 	mov	b,r6
      000DE3 05 F0            [12] 3058 	inc	b
      000DE5 74 01            [12] 3059 	mov	a,#0x01
      000DE7 80 02            [24] 3060 	sjmp	00143$
      000DE9                       3061 00141$:
      000DE9 25 E0            [12] 3062 	add	a,acc
      000DEB                       3063 00143$:
      000DEB D5 F0 FB         [24] 3064 	djnz	b,00141$
      000DEE F5*07            [12] 3065 	mov	_mask,a
                                   3066 ;	./src/main.c:533: get_bit = mask & mat1_2[col];
      000DF0 EF               [12] 3067 	mov	a,r7
      000DF1 24r36            [12] 3068 	add	a,#_mat1_2
      000DF3 F9               [12] 3069 	mov	r1,a
      000DF4 E7               [12] 3070 	mov	a,@r1
      000DF5 55*07            [12] 3071 	anl	a,_mask
      000DF7 F5*1A            [12] 3072 	mov	_get_bit,a
                                   3073 ;	./src/main.c:534: return get_bit;
      000DF9 85*1A 82         [24] 3074 	mov	dpl,_get_bit
      000DFC 22               [24] 3075 	ret
      000DFD                       3076 00104$:
                                   3077 ;	./src/main.c:536: else if (type == 3){// mat2_1
      000DFD 74 03            [12] 3078 	mov	a,#0x03
      000DFF B5*01 1E         [24] 3079 	cjne	a,_Get_Dot_PARM_3,00108$
                                   3080 ;	./src/main.c:537: mask = 1<<row;
      000E02 AE*00            [24] 3081 	mov	r6,_Get_Dot_PARM_2
      000E04 8E F0            [24] 3082 	mov	b,r6
      000E06 05 F0            [12] 3083 	inc	b
      000E08 74 01            [12] 3084 	mov	a,#0x01
      000E0A 80 02            [24] 3085 	sjmp	00148$
      000E0C                       3086 00146$:
      000E0C 25 E0            [12] 3087 	add	a,acc
      000E0E                       3088 00148$:
      000E0E D5 F0 FB         [24] 3089 	djnz	b,00146$
      000E11 F5*07            [12] 3090 	mov	_mask,a
                                   3091 ;	./src/main.c:538: get_bit = mask & mat2_1[col];
      000E13 EF               [12] 3092 	mov	a,r7
      000E14 24r3F            [12] 3093 	add	a,#_mat2_1
      000E16 F9               [12] 3094 	mov	r1,a
      000E17 E7               [12] 3095 	mov	a,@r1
      000E18 55*07            [12] 3096 	anl	a,_mask
      000E1A F5*1A            [12] 3097 	mov	_get_bit,a
                                   3098 ;	./src/main.c:539: return get_bit;
      000E1C 85*1A 82         [24] 3099 	mov	dpl,_get_bit
      000E1F 22               [24] 3100 	ret
      000E20                       3101 00108$:
                                   3102 ;	./src/main.c:541: return 0;
      000E20 75 82 00         [24] 3103 	mov	dpl,#0x00
                                   3104 ;	./src/main.c:542: }
      000E23 22               [24] 3105 	ret
                                   3106 ;------------------------------------------------------------
                                   3107 ;Allocation info for local variables in function 'mode4'
                                   3108 ;------------------------------------------------------------
                                   3109 ;	./src/main.c:544: void mode4(void){
                                   3110 ;	-----------------------------------------
                                   3111 ;	 function mode4
                                   3112 ;	-----------------------------------------
      000E24                       3113 _mode4:
                                   3114 ;	./src/main.c:545: turn = 2;
      000E24 75*1B 02         [24] 3115 	mov	_turn,#0x02
                                   3116 ;	./src/main.c:546: OLED_Clear();
      000E27 12r00r00         [24] 3117 	lcall	_OLED_Clear
                                   3118 ;	./src/main.c:547: OLED_SetCursor(2, 3);
      000E2A 75*00 03         [24] 3119 	mov	_OLED_SetCursor_PARM_2,#0x03
      000E2D 75 82 02         [24] 3120 	mov	dpl,#0x02
      000E30 12r00r00         [24] 3121 	lcall	_OLED_SetCursor
                                   3122 ;	./src/main.c:548: OLED_DisplayString("Player ");
      000E33 90r00r9C         [24] 3123 	mov	dptr,#___str_11
      000E36 75 F0 80         [24] 3124 	mov	b,#0x80
      000E39 12r00r00         [24] 3125 	lcall	_OLED_DisplayString
                                   3126 ;	./src/main.c:549: OLED_DisplayChar('0'+turn);
      000E3C AF*1B            [24] 3127 	mov	r7,_turn
      000E3E 74 30            [12] 3128 	mov	a,#0x30
      000E40 2F               [12] 3129 	add	a,r7
      000E41 F5 82            [12] 3130 	mov	dpl,a
      000E43 12r00r00         [24] 3131 	lcall	_OLED_DisplayChar
                                   3132 ;	./src/main.c:550: OLED_DisplayString(" turn ");
      000E46 90r00rA4         [24] 3133 	mov	dptr,#___str_12
      000E49 75 F0 80         [24] 3134 	mov	b,#0x80
      000E4C 12r00r00         [24] 3135 	lcall	_OLED_DisplayString
                                   3136 ;	./src/main.c:551: OLED_SetCursor(3, 4);
      000E4F 75*00 04         [24] 3137 	mov	_OLED_SetCursor_PARM_2,#0x04
      000E52 75 82 03         [24] 3138 	mov	dpl,#0x03
      000E55 12r00r00         [24] 3139 	lcall	_OLED_SetCursor
                                   3140 ;	./src/main.c:552: OLED_DisplayString("now row: ");
      000E58 90r00rAB         [24] 3141 	mov	dptr,#___str_13
      000E5B 75 F0 80         [24] 3142 	mov	b,#0x80
      000E5E 12r00r00         [24] 3143 	lcall	_OLED_DisplayString
                                   3144 ;	./src/main.c:553: OLED_SetCursor(4, 4);
      000E61 75*00 04         [24] 3145 	mov	_OLED_SetCursor_PARM_2,#0x04
      000E64 75 82 04         [24] 3146 	mov	dpl,#0x04
      000E67 12r00r00         [24] 3147 	lcall	_OLED_SetCursor
                                   3148 ;	./src/main.c:554: OLED_DisplayString("now col: ");
      000E6A 90r00rB5         [24] 3149 	mov	dptr,#___str_14
      000E6D 75 F0 80         [24] 3150 	mov	b,#0x80
      000E70 12r00r00         [24] 3151 	lcall	_OLED_DisplayString
                                   3152 ;	./src/main.c:555: OLED_SetCursor(5, 4);
      000E73 75*00 04         [24] 3153 	mov	_OLED_SetCursor_PARM_2,#0x04
      000E76 75 82 05         [24] 3154 	mov	dpl,#0x05
      000E79 12r00r00         [24] 3155 	lcall	_OLED_SetCursor
                                   3156 ;	./src/main.c:556: OLED_DisplayString("now score: ");
      000E7C 90r00rBF         [24] 3157 	mov	dptr,#___str_15
      000E7F 75 F0 80         [24] 3158 	mov	b,#0x80
      000E82 12r00r00         [24] 3159 	lcall	_OLED_DisplayString
                                   3160 ;	./src/main.c:557: while (winner == 0){
      000E85                       3161 00142$:
      000E85 E5*03            [12] 3162 	mov	a,_winner
      000E87 60 03            [24] 3163 	jz	00295$
      000E89 02r11r5E         [24] 3164 	ljmp	00144$
      000E8C                       3165 00295$:
                                   3166 ;	./src/main.c:559: now_col = player[turn][0];
      000E8C E5*1B            [12] 3167 	mov	a,_turn
      000E8E 25*1B            [12] 3168 	add	a,_turn
      000E90 24r24            [12] 3169 	add	a,#_player
      000E92 F9               [12] 3170 	mov	r1,a
      000E93 87*18            [24] 3171 	mov	_now_col,@r1
                                   3172 ;	./src/main.c:560: now_row = player[turn][1];
      000E95 09               [12] 3173 	inc	r1
      000E96 87*17            [24] 3174 	mov	_now_row,@r1
                                   3175 ;	./src/main.c:561: OLED_SetCursor(3, 55);
      000E98 75*00 37         [24] 3176 	mov	_OLED_SetCursor_PARM_2,#0x37
      000E9B 75 82 03         [24] 3177 	mov	dpl,#0x03
      000E9E 12r00r00         [24] 3178 	lcall	_OLED_SetCursor
                                   3179 ;	./src/main.c:562: OLED_DisplayChar('0'+now_row);
      000EA1 AF*17            [24] 3180 	mov	r7,_now_row
      000EA3 74 30            [12] 3181 	mov	a,#0x30
      000EA5 2F               [12] 3182 	add	a,r7
      000EA6 F5 82            [12] 3183 	mov	dpl,a
      000EA8 12r00r00         [24] 3184 	lcall	_OLED_DisplayChar
                                   3185 ;	./src/main.c:563: OLED_SetCursor(4, 55);
      000EAB 75*00 37         [24] 3186 	mov	_OLED_SetCursor_PARM_2,#0x37
      000EAE 75 82 04         [24] 3187 	mov	dpl,#0x04
      000EB1 12r00r00         [24] 3188 	lcall	_OLED_SetCursor
                                   3189 ;	./src/main.c:564: OLED_DisplayChar('0'+now_col);
      000EB4 AF*18            [24] 3190 	mov	r7,_now_col
      000EB6 74 30            [12] 3191 	mov	a,#0x30
      000EB8 2F               [12] 3192 	add	a,r7
      000EB9 F5 82            [12] 3193 	mov	dpl,a
      000EBB 12r00r00         [24] 3194 	lcall	_OLED_DisplayChar
                                   3195 ;	./src/main.c:565: OLED_SetCursor(5, 70);
      000EBE 75*00 46         [24] 3196 	mov	_OLED_SetCursor_PARM_2,#0x46
      000EC1 75 82 05         [24] 3197 	mov	dpl,#0x05
      000EC4 12r00r00         [24] 3198 	lcall	_OLED_SetCursor
                                   3199 ;	./src/main.c:566: OLED_DisplayChar(player_score[turn]/10+'0');
      000EC7 E5*1B            [12] 3200 	mov	a,_turn
      000EC9 24r2A            [12] 3201 	add	a,#_player_score
      000ECB F9               [12] 3202 	mov	r1,a
      000ECC 87 07            [24] 3203 	mov	ar7,@r1
      000ECE 7E 00            [12] 3204 	mov	r6,#0x00
      000ED0 75*00 0A         [24] 3205 	mov	__divsint_PARM_2,#0x0a
                                   3206 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000ED3 8E*01            [24] 3207 	mov	(__divsint_PARM_2 + 1),r6
      000ED5 8F 82            [24] 3208 	mov	dpl,r7
      000ED7 8E 83            [24] 3209 	mov	dph,r6
      000ED9 12r00r00         [24] 3210 	lcall	__divsint
      000EDC AE 82            [24] 3211 	mov	r6,dpl
      000EDE 74 30            [12] 3212 	mov	a,#0x30
      000EE0 2E               [12] 3213 	add	a,r6
      000EE1 F5 82            [12] 3214 	mov	dpl,a
      000EE3 12r00r00         [24] 3215 	lcall	_OLED_DisplayChar
                                   3216 ;	./src/main.c:567: OLED_DisplayChar(player_score[turn]%10 + '0');
      000EE6 E5*1B            [12] 3217 	mov	a,_turn
      000EE8 24r2A            [12] 3218 	add	a,#_player_score
      000EEA F9               [12] 3219 	mov	r1,a
      000EEB 87 07            [24] 3220 	mov	ar7,@r1
      000EED 7E 00            [12] 3221 	mov	r6,#0x00
      000EEF 75*00 0A         [24] 3222 	mov	__modsint_PARM_2,#0x0a
                                   3223 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000EF2 8E*01            [24] 3224 	mov	(__modsint_PARM_2 + 1),r6
      000EF4 8F 82            [24] 3225 	mov	dpl,r7
      000EF6 8E 83            [24] 3226 	mov	dph,r6
      000EF8 12r00r00         [24] 3227 	lcall	__modsint
      000EFB AE 82            [24] 3228 	mov	r6,dpl
      000EFD 74 30            [12] 3229 	mov	a,#0x30
      000EFF 2E               [12] 3230 	add	a,r6
      000F00 F5 82            [12] 3231 	mov	dpl,a
      000F02 12r00r00         [24] 3232 	lcall	_OLED_DisplayChar
                                   3233 ;	./src/main.c:568: now_key = Get_Key();
      000F05 12r00r00         [24] 3234 	lcall	_Get_Key
      000F08 AE 82            [24] 3235 	mov	r6,dpl
      000F0A AF 83            [24] 3236 	mov	r7,dph
                                   3237 ;	./src/main.c:569: if (now_key != 0){
      000F0C EE               [12] 3238 	mov	a,r6
      000F0D F5*08            [12] 3239 	mov	_now_key,a
      000F0F 70 03            [24] 3240 	jnz	00296$
      000F11 02r0FrC0         [24] 3241 	ljmp	00115$
      000F14                       3242 00296$:
                                   3243 ;	./src/main.c:570: delay_ms(10);
      000F14 90 00 0A         [24] 3244 	mov	dptr,#0x000a
      000F17 12r00r00         [24] 3245 	lcall	_delay_ms
                                   3246 ;	./src/main.c:571: if (now_key == Get_Key()){
      000F1A 12r00r00         [24] 3247 	lcall	_Get_Key
      000F1D AE 82            [24] 3248 	mov	r6,dpl
      000F1F AF 83            [24] 3249 	mov	r7,dph
      000F21 AC*08            [24] 3250 	mov	r4,_now_key
      000F23 7D 00            [12] 3251 	mov	r5,#0x00
      000F25 EC               [12] 3252 	mov	a,r4
      000F26 B5 06 06         [24] 3253 	cjne	a,ar6,00297$
      000F29 ED               [12] 3254 	mov	a,r5
      000F2A B5 07 02         [24] 3255 	cjne	a,ar7,00297$
      000F2D 80 03            [24] 3256 	sjmp	00298$
      000F2F                       3257 00297$:
      000F2F 02r0FrC0         [24] 3258 	ljmp	00115$
      000F32                       3259 00298$:
                                   3260 ;	./src/main.c:572: nxt_col = now_col;nxt_row = now_row;
      000F32 85*18*16         [24] 3261 	mov	_nxt_col,_now_col
      000F35 85*17*15         [24] 3262 	mov	_nxt_row,_now_row
                                   3263 ;	./src/main.c:573: if (now_key == 3){
      000F38 74 03            [12] 3264 	mov	a,#0x03
      000F3A B5*08 15         [24] 3265 	cjne	a,_now_key,00110$
                                   3266 ;	./src/main.c:574: nxt_row = (now_row <= 0)? 0:now_row-1;
      000F3D E5*17            [12] 3267 	mov	a,_now_row
      000F3F 70 04            [24] 3268 	jnz	00159$
      000F41 FE               [12] 3269 	mov	r6,a
      000F42 FF               [12] 3270 	mov	r7,a
      000F43 80 09            [24] 3271 	sjmp	00160$
      000F45                       3272 00159$:
      000F45 AD*17            [24] 3273 	mov	r5,_now_row
      000F47 1D               [12] 3274 	dec	r5
      000F48 ED               [12] 3275 	mov	a,r5
      000F49 FE               [12] 3276 	mov	r6,a
      000F4A 33               [12] 3277 	rlc	a
      000F4B 95 E0            [12] 3278 	subb	a,acc
      000F4D FF               [12] 3279 	mov	r7,a
      000F4E                       3280 00160$:
      000F4E 8E*15            [24] 3281 	mov	_nxt_row,r6
      000F50 80 54            [24] 3282 	sjmp	00111$
      000F52                       3283 00110$:
                                   3284 ;	./src/main.c:575: }else if (now_key == 4){
      000F52 74 04            [12] 3285 	mov	a,#0x04
      000F54 B5*08 16         [24] 3286 	cjne	a,_now_key,00107$
                                   3287 ;	./src/main.c:576: nxt_row = (now_row >= 7)? now_row:now_row+1;
      000F57 C3               [12] 3288 	clr	c
      000F58 E5*17            [12] 3289 	mov	a,_now_row
      000F5A 94 07            [12] 3290 	subb	a,#0x07
      000F5C 92*03            [24] 3291 	mov	_mode4_sloc0_1_0,c
      000F5E 40 04            [24] 3292 	jc	00161$
      000F60 AF*17            [24] 3293 	mov	r7,_now_row
      000F62 80 05            [24] 3294 	sjmp	00162$
      000F64                       3295 00161$:
      000F64 E5*17            [12] 3296 	mov	a,_now_row
      000F66 FE               [12] 3297 	mov	r6,a
      000F67 04               [12] 3298 	inc	a
      000F68 FF               [12] 3299 	mov	r7,a
      000F69                       3300 00162$:
      000F69 8F*15            [24] 3301 	mov	_nxt_row,r7
      000F6B 80 39            [24] 3302 	sjmp	00111$
      000F6D                       3303 00107$:
                                   3304 ;	./src/main.c:577: }else if (now_key == 7){
      000F6D 74 07            [12] 3305 	mov	a,#0x07
      000F6F B5*08 1B         [24] 3306 	cjne	a,_now_key,00104$
                                   3307 ;	./src/main.c:578: nxt_col = (now_col <= 1)? 1:now_col-1;
      000F72 E5*18            [12] 3308 	mov	a,_now_col
      000F74 24 FE            [12] 3309 	add	a,#0xff - 0x01
      000F76 92*03            [24] 3310 	mov	_mode4_sloc0_1_0,c
      000F78 40 06            [24] 3311 	jc	00163$
      000F7A 7E 01            [12] 3312 	mov	r6,#0x01
      000F7C 7F 00            [12] 3313 	mov	r7,#0x00
      000F7E 80 09            [24] 3314 	sjmp	00164$
      000F80                       3315 00163$:
      000F80 AD*18            [24] 3316 	mov	r5,_now_col
      000F82 1D               [12] 3317 	dec	r5
      000F83 ED               [12] 3318 	mov	a,r5
      000F84 FE               [12] 3319 	mov	r6,a
      000F85 33               [12] 3320 	rlc	a
      000F86 95 E0            [12] 3321 	subb	a,acc
      000F88 FF               [12] 3322 	mov	r7,a
      000F89                       3323 00164$:
      000F89 8E*16            [24] 3324 	mov	_nxt_col,r6
      000F8B 80 19            [24] 3325 	sjmp	00111$
      000F8D                       3326 00104$:
                                   3327 ;	./src/main.c:579: }else if (now_key == 8){
      000F8D 74 08            [12] 3328 	mov	a,#0x08
      000F8F B5*08 14         [24] 3329 	cjne	a,_now_key,00111$
                                   3330 ;	./src/main.c:580: nxt_col = (now_col >= 8)? now_col:now_col+1;
      000F92 C3               [12] 3331 	clr	c
      000F93 E5*18            [12] 3332 	mov	a,_now_col
      000F95 94 08            [12] 3333 	subb	a,#0x08
      000F97 92*03            [24] 3334 	mov	_mode4_sloc0_1_0,c
      000F99 40 04            [24] 3335 	jc	00165$
      000F9B AF*18            [24] 3336 	mov	r7,_now_col
      000F9D 80 05            [24] 3337 	sjmp	00166$
      000F9F                       3338 00165$:
      000F9F E5*18            [12] 3339 	mov	a,_now_col
      000FA1 FE               [12] 3340 	mov	r6,a
      000FA2 04               [12] 3341 	inc	a
      000FA3 FF               [12] 3342 	mov	r7,a
      000FA4                       3343 00166$:
      000FA4 8F*16            [24] 3344 	mov	_nxt_col,r7
      000FA6                       3345 00111$:
                                   3346 ;	./src/main.c:582: now_col = nxt_col;
      000FA6 85*16*18         [24] 3347 	mov	_now_col,_nxt_col
                                   3348 ;	./src/main.c:583: now_row = nxt_row;
      000FA9 85*15*17         [24] 3349 	mov	_now_row,_nxt_row
                                   3350 ;	./src/main.c:584: player[turn][0] = now_col;
      000FAC E5*1B            [12] 3351 	mov	a,_turn
      000FAE 25*1B            [12] 3352 	add	a,_turn
      000FB0 24r24            [12] 3353 	add	a,#_player
      000FB2 F8               [12] 3354 	mov	r0,a
      000FB3 A6*18            [24] 3355 	mov	@r0,_now_col
                                   3356 ;	./src/main.c:585: player[turn][1] = now_row;
      000FB5 E5*1B            [12] 3357 	mov	a,_turn
      000FB7 25*1B            [12] 3358 	add	a,_turn
      000FB9 24r24            [12] 3359 	add	a,#_player
      000FBB FF               [12] 3360 	mov	r7,a
      000FBC 04               [12] 3361 	inc	a
      000FBD F8               [12] 3362 	mov	r0,a
      000FBE A6*17            [24] 3363 	mov	@r0,_now_row
      000FC0                       3364 00115$:
                                   3365 ;	./src/main.c:589: if (but4 == 0){
      000FC0 20 A1 23         [24] 3366 	jb	_P2_1,00119$
                                   3367 ;	./src/main.c:590: delay_ms(10);
      000FC3 90 00 0A         [24] 3368 	mov	dptr,#0x000a
      000FC6 12r00r00         [24] 3369 	lcall	_delay_ms
                                   3370 ;	./src/main.c:591: if (but4 == 0){
      000FC9 20 A1 1A         [24] 3371 	jb	_P2_1,00119$
                                   3372 ;	./src/main.c:592: player[turn][0] = now_col;
      000FCC E5*1B            [12] 3373 	mov	a,_turn
      000FCE 25*1B            [12] 3374 	add	a,_turn
      000FD0 24r24            [12] 3375 	add	a,#_player
      000FD2 F8               [12] 3376 	mov	r0,a
      000FD3 A6*18            [24] 3377 	mov	@r0,_now_col
                                   3378 ;	./src/main.c:593: player[turn][1] = now_row;
      000FD5 E5*1B            [12] 3379 	mov	a,_turn
      000FD7 25*1B            [12] 3380 	add	a,_turn
      000FD9 24r24            [12] 3381 	add	a,#_player
      000FDB FF               [12] 3382 	mov	r7,a
      000FDC 04               [12] 3383 	inc	a
      000FDD F8               [12] 3384 	mov	r0,a
      000FDE A6*17            [24] 3385 	mov	@r0,_now_row
                                   3386 ;	./src/main.c:594: mode = 3;
      000FE0 75*02 03         [24] 3387 	mov	_mode,#0x03
                                   3388 ;	./src/main.c:595: break;
      000FE3 02r11r5E         [24] 3389 	ljmp	00144$
      000FE6                       3390 00119$:
                                   3391 ;	./src/main.c:598: if (but3 == 0){
      000FE6 30 A0 03         [24] 3392 	jnb	_P2_0,00313$
      000FE9 02r10rCB         [24] 3393 	ljmp	00133$
      000FEC                       3394 00313$:
                                   3395 ;	./src/main.c:599: delay_ms(10);
      000FEC 90 00 0A         [24] 3396 	mov	dptr,#0x000a
      000FEF 12r00r00         [24] 3397 	lcall	_delay_ms
                                   3398 ;	./src/main.c:600: if (but3 == 0){
      000FF2 30 A0 03         [24] 3399 	jnb	_P2_0,00314$
      000FF5 02r10rCB         [24] 3400 	ljmp	00133$
      000FF8                       3401 00314$:
                                   3402 ;	./src/main.c:601: if (Get_Dot(now_col, now_row, 3) != 0){ // 猜到重覆
      000FF8 85*17*00         [24] 3403 	mov	_Get_Dot_PARM_2,_now_row
      000FFB 75*01 03         [24] 3404 	mov	_Get_Dot_PARM_3,#0x03
      000FFE 85*18 82         [24] 3405 	mov	dpl,_now_col
      001001 12r0Dr93         [24] 3406 	lcall	_Get_Dot
      001004 E5 82            [12] 3407 	mov	a,dpl
      001006 60 27            [24] 3408 	jz	00122$
                                   3409 ;	./src/main.c:602: for(in_i = 0;in_i < 523;in_i++){
      001008 E4               [12] 3410 	clr	a
      001009 F5*00            [12] 3411 	mov	_in_i,a
      00100B F5*01            [12] 3412 	mov	(_in_i + 1),a
      00100D                       3413 00147$:
                                   3414 ;	./src/main.c:603: P3_7 = 1;
                                   3415 ;	assignBit
      00100D D2 B7            [12] 3416 	setb	_P3_7
                                   3417 ;	./src/main.c:604: Delay_Do();
      00100F 12r00r00         [24] 3418 	lcall	_Delay_Do
                                   3419 ;	./src/main.c:605: P3_7 = 0;
                                   3420 ;	assignBit
      001012 C2 B7            [12] 3421 	clr	_P3_7
                                   3422 ;	./src/main.c:606: Delay_Do();
      001014 12r00r00         [24] 3423 	lcall	_Delay_Do
                                   3424 ;	./src/main.c:602: for(in_i = 0;in_i < 523;in_i++){
      001017 05*00            [12] 3425 	inc	_in_i
      001019 E4               [12] 3426 	clr	a
      00101A B5*00 02         [24] 3427 	cjne	a,_in_i,00316$
      00101D 05*01            [12] 3428 	inc	(_in_i + 1)
      00101F                       3429 00316$:
      00101F C3               [12] 3430 	clr	c
      001020 E5*00            [12] 3431 	mov	a,_in_i
      001022 94 0B            [12] 3432 	subb	a,#0x0b
      001024 E5*01            [12] 3433 	mov	a,(_in_i + 1)
      001026 64 80            [12] 3434 	xrl	a,#0x80
      001028 94 82            [12] 3435 	subb	a,#0x82
      00102A 40 E1            [24] 3436 	jc	00147$
                                   3437 ;	./src/main.c:608: continue;
      00102C 02r0Er85         [24] 3438 	ljmp	00142$
      00102F                       3439 00122$:
                                   3440 ;	./src/main.c:610: draw(now_col, now_row, now_col, now_row, 3);
      00102F 85*17*00         [24] 3441 	mov	_draw_PARM_2,_now_row
      001032 85*18*01         [24] 3442 	mov	_draw_PARM_3,_now_col
      001035 85*17*02         [24] 3443 	mov	_draw_PARM_4,_now_row
      001038 75*03 03         [24] 3444 	mov	_draw_PARM_5,#0x03
      00103B 85*18 82         [24] 3445 	mov	dpl,_now_col
      00103E 12r0Cr9D         [24] 3446 	lcall	_draw
                                   3447 ;	./src/main.c:611: if ((Get_Dot(now_col, now_row, 0) == 0)){ // 猜錯
      001041 85*17*00         [24] 3448 	mov	_Get_Dot_PARM_2,_now_row
      001044 75*01 00         [24] 3449 	mov	_Get_Dot_PARM_3,#0x00
      001047 85*18 82         [24] 3450 	mov	dpl,_now_col
      00104A 12r0Dr93         [24] 3451 	lcall	_Get_Dot
      00104D E5 82            [12] 3452 	mov	a,dpl
                                   3453 ;	./src/main.c:612: for(in_i = 0;in_i < 523;in_i++){
      00104F 70 3D            [24] 3454 	jnz	00128$
      001051 F5*00            [12] 3455 	mov	_in_i,a
      001053 F5*01            [12] 3456 	mov	(_in_i + 1),a
      001055                       3457 00149$:
                                   3458 ;	./src/main.c:613: P3_7 = 1;
                                   3459 ;	assignBit
      001055 D2 B7            [12] 3460 	setb	_P3_7
                                   3461 ;	./src/main.c:614: Delay_Do();
      001057 12r00r00         [24] 3462 	lcall	_Delay_Do
                                   3463 ;	./src/main.c:615: P3_7 = 0;
                                   3464 ;	assignBit
      00105A C2 B7            [12] 3465 	clr	_P3_7
                                   3466 ;	./src/main.c:616: Delay_Do();
      00105C 12r00r00         [24] 3467 	lcall	_Delay_Do
                                   3468 ;	./src/main.c:612: for(in_i = 0;in_i < 523;in_i++){
      00105F 05*00            [12] 3469 	inc	_in_i
      001061 E4               [12] 3470 	clr	a
      001062 B5*00 02         [24] 3471 	cjne	a,_in_i,00319$
      001065 05*01            [12] 3472 	inc	(_in_i + 1)
      001067                       3473 00319$:
      001067 C3               [12] 3474 	clr	c
      001068 E5*00            [12] 3475 	mov	a,_in_i
      00106A 94 0B            [12] 3476 	subb	a,#0x0b
      00106C E5*01            [12] 3477 	mov	a,(_in_i + 1)
      00106E 64 80            [12] 3478 	xrl	a,#0x80
      001070 94 82            [12] 3479 	subb	a,#0x82
      001072 40 E1            [24] 3480 	jc	00149$
                                   3481 ;	./src/main.c:618: player[turn][0] = now_col;
      001074 E5*1B            [12] 3482 	mov	a,_turn
      001076 25*1B            [12] 3483 	add	a,_turn
      001078 24r24            [12] 3484 	add	a,#_player
      00107A F8               [12] 3485 	mov	r0,a
      00107B A6*18            [24] 3486 	mov	@r0,_now_col
                                   3487 ;	./src/main.c:619: player[turn][1] = now_row;
      00107D E5*1B            [12] 3488 	mov	a,_turn
      00107F 25*1B            [12] 3489 	add	a,_turn
      001081 24r24            [12] 3490 	add	a,#_player
      001083 FF               [12] 3491 	mov	r7,a
      001084 04               [12] 3492 	inc	a
      001085 F8               [12] 3493 	mov	r0,a
      001086 A6*17            [24] 3494 	mov	@r0,_now_row
                                   3495 ;	./src/main.c:620: mode = 3;
      001088 75*02 03         [24] 3496 	mov	_mode,#0x03
                                   3497 ;	./src/main.c:621: break;
      00108B 02r11r5E         [24] 3498 	ljmp	00144$
      00108E                       3499 00128$:
                                   3500 ;	./src/main.c:623: for(in_i = 0;in_i < 588;in_i++){// 猜對
      00108E E4               [12] 3501 	clr	a
      00108F F5*00            [12] 3502 	mov	_in_i,a
      001091 F5*01            [12] 3503 	mov	(_in_i + 1),a
      001093                       3504 00151$:
                                   3505 ;	./src/main.c:624: P3_7 = 1;
                                   3506 ;	assignBit
      001093 D2 B7            [12] 3507 	setb	_P3_7
                                   3508 ;	./src/main.c:625: Delay_Re();
      001095 12r00r00         [24] 3509 	lcall	_Delay_Re
                                   3510 ;	./src/main.c:626: P3_7 = 0;
                                   3511 ;	assignBit
      001098 C2 B7            [12] 3512 	clr	_P3_7
                                   3513 ;	./src/main.c:627: Delay_Re();
      00109A 12r00r00         [24] 3514 	lcall	_Delay_Re
                                   3515 ;	./src/main.c:623: for(in_i = 0;in_i < 588;in_i++){// 猜對
      00109D 05*00            [12] 3516 	inc	_in_i
      00109F E4               [12] 3517 	clr	a
      0010A0 B5*00 02         [24] 3518 	cjne	a,_in_i,00321$
      0010A3 05*01            [12] 3519 	inc	(_in_i + 1)
      0010A5                       3520 00321$:
      0010A5 C3               [12] 3521 	clr	c
      0010A6 E5*00            [12] 3522 	mov	a,_in_i
      0010A8 94 4C            [12] 3523 	subb	a,#0x4c
      0010AA E5*01            [12] 3524 	mov	a,(_in_i + 1)
      0010AC 64 80            [12] 3525 	xrl	a,#0x80
      0010AE 94 82            [12] 3526 	subb	a,#0x82
      0010B0 40 E1            [24] 3527 	jc	00151$
                                   3528 ;	./src/main.c:629: player_score[turn]+=1;
      0010B2 E5*1B            [12] 3529 	mov	a,_turn
      0010B4 24r2A            [12] 3530 	add	a,#_player_score
      0010B6 F9               [12] 3531 	mov	r1,a
      0010B7 07               [12] 3532 	inc	@r1
      0010B8 E7               [12] 3533 	mov	a,@r1
                                   3534 ;	./src/main.c:630: if (player_score[turn] >= 17){
      0010B9 E5*1B            [12] 3535 	mov	a,_turn
      0010BB 24r2A            [12] 3536 	add	a,#_player_score
      0010BD F9               [12] 3537 	mov	r1,a
      0010BE 87 07            [24] 3538 	mov	ar7,@r1
      0010C0 BF 11 00         [24] 3539 	cjne	r7,#0x11,00323$
      0010C3                       3540 00323$:
      0010C3 40 06            [24] 3541 	jc	00133$
                                   3542 ;	./src/main.c:631: winner = turn;
      0010C5 85*1B*03         [24] 3543 	mov	_winner,_turn
                                   3544 ;	./src/main.c:632: break;
      0010C8 02r11r5E         [24] 3545 	ljmp	00144$
      0010CB                       3546 00133$:
                                   3547 ;	./src/main.c:637: for (i=1;i<=8;i++){
      0010CB 75*0D 01         [24] 3548 	mov	_i,#0x01
      0010CE                       3549 00153$:
                                   3550 ;	./src/main.c:638: mask = 0;
      0010CE 75*07 00         [24] 3551 	mov	_mask,#0x00
                                   3552 ;	./src/main.c:639: if (i == now_col)mask = 1 << now_row;
      0010D1 E5*18            [12] 3553 	mov	a,_now_col
      0010D3 B5*0D 13         [24] 3554 	cjne	a,_i,00135$
      0010D6 AF*17            [24] 3555 	mov	r7,_now_row
      0010D8 8F F0            [24] 3556 	mov	b,r7
      0010DA 05 F0            [12] 3557 	inc	b
      0010DC 74 01            [12] 3558 	mov	a,#0x01
      0010DE 80 02            [24] 3559 	sjmp	00329$
      0010E0                       3560 00327$:
      0010E0 25 E0            [12] 3561 	add	a,acc
      0010E2                       3562 00329$:
      0010E2 D5 F0 FB         [24] 3563 	djnz	b,00327$
      0010E5 F5*07            [12] 3564 	mov	_mask,a
      0010E7 80 03            [24] 3565 	sjmp	00136$
      0010E9                       3566 00135$:
                                   3567 ;	./src/main.c:640: else mask = 0;
      0010E9 75*07 00         [24] 3568 	mov	_mask,#0x00
      0010EC                       3569 00136$:
                                   3570 ;	./src/main.c:641: Writesingle7219(3, i, (mat2_1[i] | mask));
      0010EC E5*0D            [12] 3571 	mov	a,_i
      0010EE 24r3F            [12] 3572 	add	a,#_mat2_1
      0010F0 F9               [12] 3573 	mov	r1,a
      0010F1 87 07            [24] 3574 	mov	ar7,@r1
      0010F3 E5*07            [12] 3575 	mov	a,_mask
      0010F5 4F               [12] 3576 	orl	a,r7
      0010F6 F5*00            [12] 3577 	mov	_Writesingle7219_PARM_3,a
      0010F8 85*0D*00         [24] 3578 	mov	_Writesingle7219_PARM_2,_i
      0010FB 75 82 03         [24] 3579 	mov	dpl,#0x03
      0010FE 12r00r00         [24] 3580 	lcall	_Writesingle7219
                                   3581 ;	./src/main.c:637: for (i=1;i<=8;i++){
      001101 05*0D            [12] 3582 	inc	_i
      001103 E5*0D            [12] 3583 	mov	a,_i
      001105 24 F7            [12] 3584 	add	a,#0xff - 0x08
      001107 50 C5            [24] 3585 	jnc	00153$
                                   3586 ;	./src/main.c:642: }delay_ms(100);
      001109 90 00 64         [24] 3587 	mov	dptr,#0x0064
      00110C 12r00r00         [24] 3588 	lcall	_delay_ms
                                   3589 ;	./src/main.c:643: for (i=1;i<=8;i++){
      00110F 75*0D 01         [24] 3590 	mov	_i,#0x01
      001112                       3591 00155$:
                                   3592 ;	./src/main.c:644: mask = 0;
      001112 75*07 00         [24] 3593 	mov	_mask,#0x00
                                   3594 ;	./src/main.c:645: if (now_col == i)mask |= 1<<now_row;
      001115 E5*0D            [12] 3595 	mov	a,_i
      001117 B5*18 13         [24] 3596 	cjne	a,_now_col,00139$
      00111A AF*17            [24] 3597 	mov	r7,_now_row
      00111C 8F F0            [24] 3598 	mov	b,r7
      00111E 05 F0            [12] 3599 	inc	b
      001120 74 01            [12] 3600 	mov	a,#0x01
      001122 80 02            [24] 3601 	sjmp	00335$
      001124                       3602 00333$:
      001124 25 E0            [12] 3603 	add	a,acc
      001126                       3604 00335$:
      001126 D5 F0 FB         [24] 3605 	djnz	b,00333$
      001129 F5*07            [12] 3606 	mov	_mask,a
      00112B 80 03            [24] 3607 	sjmp	00140$
      00112D                       3608 00139$:
                                   3609 ;	./src/main.c:646: else mask = 0;
      00112D 75*07 00         [24] 3610 	mov	_mask,#0x00
      001130                       3611 00140$:
                                   3612 ;	./src/main.c:647: mask |= (mat1_1[i] & mat2_1[i]);
      001130 E5*0D            [12] 3613 	mov	a,_i
      001132 24r2D            [12] 3614 	add	a,#_mat1_1
      001134 F9               [12] 3615 	mov	r1,a
      001135 87 07            [24] 3616 	mov	ar7,@r1
      001137 E5*0D            [12] 3617 	mov	a,_i
      001139 24r3F            [12] 3618 	add	a,#_mat2_1
      00113B F9               [12] 3619 	mov	r1,a
      00113C E7               [12] 3620 	mov	a,@r1
      00113D 5F               [12] 3621 	anl	a,r7
      00113E 42*07            [12] 3622 	orl	_mask,a
                                   3623 ;	./src/main.c:648: mask = ~mask;
      001140 E5*07            [12] 3624 	mov	a,_mask
      001142 F4               [12] 3625 	cpl	a
                                   3626 ;	./src/main.c:649: Writesingle7219(3, i, mat2_1[i]&mask);
      001143 F5*07            [12] 3627 	mov	_mask,a
      001145 87 07            [24] 3628 	mov	ar7,@r1
      001147 5F               [12] 3629 	anl	a,r7
      001148 F5*00            [12] 3630 	mov	_Writesingle7219_PARM_3,a
      00114A 85*0D*00         [24] 3631 	mov	_Writesingle7219_PARM_2,_i
      00114D 75 82 03         [24] 3632 	mov	dpl,#0x03
      001150 12r00r00         [24] 3633 	lcall	_Writesingle7219
                                   3634 ;	./src/main.c:643: for (i=1;i<=8;i++){
      001153 05*0D            [12] 3635 	inc	_i
      001155 E5*0D            [12] 3636 	mov	a,_i
      001157 24 F7            [12] 3637 	add	a,#0xff - 0x08
      001159 50 B7            [24] 3638 	jnc	00155$
      00115B 02r0Er85         [24] 3639 	ljmp	00142$
      00115E                       3640 00144$:
                                   3641 ;	./src/main.c:652: if (winner != 0){
      00115E E5*03            [12] 3642 	mov	a,_winner
      001160 60 03            [24] 3643 	jz	00157$
                                   3644 ;	./src/main.c:653: mode = 5;
      001162 75*02 05         [24] 3645 	mov	_mode,#0x05
      001165                       3646 00157$:
                                   3647 ;	./src/main.c:658: }
      001165 22               [24] 3648 	ret
                                   3649 ;------------------------------------------------------------
                                   3650 ;Allocation info for local variables in function 'mode5'
                                   3651 ;------------------------------------------------------------
                                   3652 ;	./src/main.c:659: void mode5(void){
                                   3653 ;	-----------------------------------------
                                   3654 ;	 function mode5
                                   3655 ;	-----------------------------------------
      001166                       3656 _mode5:
                                   3657 ;	./src/main.c:660: OLED_Clear();
      001166 12r00r00         [24] 3658 	lcall	_OLED_Clear
                                   3659 ;	./src/main.c:661: OLED_SetCursor(3, 13);
      001169 75*00 0D         [24] 3660 	mov	_OLED_SetCursor_PARM_2,#0x0d
      00116C 75 82 03         [24] 3661 	mov	dpl,#0x03
      00116F 12r00r00         [24] 3662 	lcall	_OLED_SetCursor
                                   3663 ;	./src/main.c:662: OLED_DisplayString("Winner is player");
      001172 90r00rCB         [24] 3664 	mov	dptr,#___str_16
      001175 75 F0 80         [24] 3665 	mov	b,#0x80
      001178 12r00r00         [24] 3666 	lcall	_OLED_DisplayString
                                   3667 ;	./src/main.c:663: OLED_DisplayChar('0'+winner);
      00117B AF*03            [24] 3668 	mov	r7,_winner
      00117D 74 30            [12] 3669 	mov	a,#0x30
      00117F 2F               [12] 3670 	add	a,r7
      001180 F5 82            [12] 3671 	mov	dpl,a
      001182 12r00r00         [24] 3672 	lcall	_OLED_DisplayChar
                                   3673 ;	./src/main.c:664: while (1);
      001185                       3674 00102$:
                                   3675 ;	./src/main.c:665: }
      001185 80 FE            [24] 3676 	sjmp	00102$
                                   3677 	.area CSEG    (CODE)
                                   3678 	.area CONST   (CODE)
                                   3679 	.area CONST   (CODE)
      000000                       3680 ___str_0:
      000000 50 72 65 73 73 20 62  3681 	.ascii "Press but1"
             75 74 31
      00000A 00                    3682 	.db 0x00
                                   3683 	.area CSEG    (CODE)
                                   3684 	.area CONST   (CODE)
      00000B                       3685 ___str_1:
      00000B 62 75 74 34 20 74 6F  3686 	.ascii "but4 to start"
             20 73 74 61 72 74
      000018 00                    3687 	.db 0x00
                                   3688 	.area CSEG    (CODE)
                                   3689 	.area CONST   (CODE)
      000019                       3690 ___str_2:
      000019 50 6C 61 79 65 72 31  3691 	.ascii "Player1 is ready"
             20 69 73 20 72 65 61
             64 79
      000029 00                    3692 	.db 0x00
                                   3693 	.area CSEG    (CODE)
                                   3694 	.area CONST   (CODE)
      00002A                       3695 ___str_3:
      00002A 57 61 69 74 20 66 6F  3696 	.ascii "Wait for player1"
             72 20 70 6C 61 79 65
             72 31
      00003A 00                    3697 	.db 0x00
                                   3698 	.area CSEG    (CODE)
                                   3699 	.area CONST   (CODE)
      00003B                       3700 ___str_4:
      00003B 50 6C 61 79 65 72 32  3701 	.ascii "Player2 is ready"
             20 69 73 20 72 65 61
             64 79
      00004B 00                    3702 	.db 0x00
                                   3703 	.area CSEG    (CODE)
                                   3704 	.area CONST   (CODE)
      00004C                       3705 ___str_5:
      00004C 57 61 69 74 20 66 6F  3706 	.ascii "Wait for player2"
             72 20 70 6C 61 79 65
             72 32
      00005C 00                    3707 	.db 0x00
                                   3708 	.area CSEG    (CODE)
                                   3709 	.area CONST   (CODE)
      00005D                       3710 ___str_6:
      00005D 50 6C 61 79 65 72 31  3711 	.ascii "Player1 setting "
             20 73 65 74 74 69 6E
             67 20
      00006D 00                    3712 	.db 0x00
                                   3713 	.area CSEG    (CODE)
                                   3714 	.area CONST   (CODE)
      00006E                       3715 ___str_7:
      00006E 73 65 74 74 69 6E 67  3716 	.ascii "setting "
             20
      000076 00                    3717 	.db 0x00
                                   3718 	.area CSEG    (CODE)
                                   3719 	.area CONST   (CODE)
      000077                       3720 ___str_8:
      000077 73 65 74 20 72 6F 77  3721 	.ascii "set row: "
             3A 20
      000080 00                    3722 	.db 0x00
                                   3723 	.area CSEG    (CODE)
                                   3724 	.area CONST   (CODE)
      000081                       3725 ___str_9:
      000081 73 65 74 20 63 6F 6C  3726 	.ascii "set col: "
             3A 20
      00008A 00                    3727 	.db 0x00
                                   3728 	.area CSEG    (CODE)
                                   3729 	.area CONST   (CODE)
      00008B                       3730 ___str_10:
      00008B 50 6C 61 79 65 72 32  3731 	.ascii "Player2 setting "
             20 73 65 74 74 69 6E
             67 20
      00009B 00                    3732 	.db 0x00
                                   3733 	.area CSEG    (CODE)
                                   3734 	.area CONST   (CODE)
      00009C                       3735 ___str_11:
      00009C 50 6C 61 79 65 72 20  3736 	.ascii "Player "
      0000A3 00                    3737 	.db 0x00
                                   3738 	.area CSEG    (CODE)
                                   3739 	.area CONST   (CODE)
      0000A4                       3740 ___str_12:
      0000A4 20 74 75 72 6E 20     3741 	.ascii " turn "
      0000AA 00                    3742 	.db 0x00
                                   3743 	.area CSEG    (CODE)
                                   3744 	.area CONST   (CODE)
      0000AB                       3745 ___str_13:
      0000AB 6E 6F 77 20 72 6F 77  3746 	.ascii "now row: "
             3A 20
      0000B4 00                    3747 	.db 0x00
                                   3748 	.area CSEG    (CODE)
                                   3749 	.area CONST   (CODE)
      0000B5                       3750 ___str_14:
      0000B5 6E 6F 77 20 63 6F 6C  3751 	.ascii "now col: "
             3A 20
      0000BE 00                    3752 	.db 0x00
                                   3753 	.area CSEG    (CODE)
                                   3754 	.area CONST   (CODE)
      0000BF                       3755 ___str_15:
      0000BF 6E 6F 77 20 73 63 6F  3756 	.ascii "now score: "
             72 65 3A 20
      0000CA 00                    3757 	.db 0x00
                                   3758 	.area CSEG    (CODE)
                                   3759 	.area CONST   (CODE)
      0000CB                       3760 ___str_16:
      0000CB 57 69 6E 6E 65 72 20  3761 	.ascii "Winner is player"
             69 73 20 70 6C 61 79
             65 72
      0000DB 00                    3762 	.db 0x00
                                   3763 	.area CSEG    (CODE)
                                   3764 	.area XINIT   (CODE)
                                   3765 	.area CABS    (ABS,CODE)
